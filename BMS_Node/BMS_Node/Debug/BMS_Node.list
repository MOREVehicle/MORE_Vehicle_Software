
BMS_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b54  08004b54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b54  08004b54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b54  08004b54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000128  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a91  00000000  00000000  0002b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  0002dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dbe8  00000000  00000000  0002e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4e2  00000000  00000000  0004bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0313  00000000  00000000  00057442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00107755  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000241c  00000000  00000000  001077a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a58 	.word	0x08004a58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004a58 	.word	0x08004a58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Individual_Cell_Voltages_G0_Decoder>:
	(data[3] & (1<<4)) ? Battery_charging_finished = Active  :  Inactive;
	(data[3] & (1<<5)) ? Cell_Temperatures = Valid           :  Invalid;

}

void Individual_Cell_Voltages_G0_Decoder(uint8_t *data){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint8_t Voltage_Cell_5;
	uint8_t Voltage_Cell_6;
	uint8_t Voltage_Cell_7;
	uint8_t Voltage_Cell_8;

	Voltage_Cell_1=(data[0]+200)/100;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	33c8      	adds	r3, #200	; 0xc8
 800027e:	4a40      	ldr	r2, [pc, #256]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 8000280:	fb82 1203 	smull	r1, r2, r2, r3
 8000284:	1152      	asrs	r2, r2, #5
 8000286:	17db      	asrs	r3, r3, #31
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	73fb      	strb	r3, [r7, #15]
	Voltage_Cell_2=(data[1]+200)/100;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	33c8      	adds	r3, #200	; 0xc8
 8000294:	4a3a      	ldr	r2, [pc, #232]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 8000296:	fb82 1203 	smull	r1, r2, r2, r3
 800029a:	1152      	asrs	r2, r2, #5
 800029c:	17db      	asrs	r3, r3, #31
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	73bb      	strb	r3, [r7, #14]
	Voltage_Cell_3=(data[2]+200)/100;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3302      	adds	r3, #2
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	33c8      	adds	r3, #200	; 0xc8
 80002aa:	4a35      	ldr	r2, [pc, #212]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 80002ac:	fb82 1203 	smull	r1, r2, r2, r3
 80002b0:	1152      	asrs	r2, r2, #5
 80002b2:	17db      	asrs	r3, r3, #31
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	737b      	strb	r3, [r7, #13]
	Voltage_Cell_4=(data[3]+200)/100;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3303      	adds	r3, #3
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	33c8      	adds	r3, #200	; 0xc8
 80002c0:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 80002c2:	fb82 1203 	smull	r1, r2, r2, r3
 80002c6:	1152      	asrs	r2, r2, #5
 80002c8:	17db      	asrs	r3, r3, #31
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	733b      	strb	r3, [r7, #12]
	Voltage_Cell_5=(data[4]+200)/100;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3304      	adds	r3, #4
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	33c8      	adds	r3, #200	; 0xc8
 80002d6:	4a2a      	ldr	r2, [pc, #168]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 80002d8:	fb82 1203 	smull	r1, r2, r2, r3
 80002dc:	1152      	asrs	r2, r2, #5
 80002de:	17db      	asrs	r3, r3, #31
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	72fb      	strb	r3, [r7, #11]
	Voltage_Cell_6=(data[5]+200)/100;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3305      	adds	r3, #5
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	33c8      	adds	r3, #200	; 0xc8
 80002ec:	4a24      	ldr	r2, [pc, #144]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 80002ee:	fb82 1203 	smull	r1, r2, r2, r3
 80002f2:	1152      	asrs	r2, r2, #5
 80002f4:	17db      	asrs	r3, r3, #31
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	72bb      	strb	r3, [r7, #10]
	Voltage_Cell_7=(data[6]+200)/100;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3306      	adds	r3, #6
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	33c8      	adds	r3, #200	; 0xc8
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 8000304:	fb82 1203 	smull	r1, r2, r2, r3
 8000308:	1152      	asrs	r2, r2, #5
 800030a:	17db      	asrs	r3, r3, #31
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	727b      	strb	r3, [r7, #9]
	Voltage_Cell_8=(data[7]+200)/100;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3307      	adds	r3, #7
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	33c8      	adds	r3, #200	; 0xc8
 8000318:	4a19      	ldr	r2, [pc, #100]	; (8000380 <Individual_Cell_Voltages_G0_Decoder+0x110>)
 800031a:	fb82 1203 	smull	r1, r2, r2, r3
 800031e:	1152      	asrs	r2, r2, #5
 8000320:	17db      	asrs	r3, r3, #31
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	723b      	strb	r3, [r7, #8]

	NEXTION_ChangeVal(dpObj_Cell1,(uint32_t)Voltage_Cell_1);
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	4619      	mov	r1, r3
 800032a:	4816      	ldr	r0, [pc, #88]	; (8000384 <Individual_Cell_Voltages_G0_Decoder+0x114>)
 800032c:	f000 f992 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell2,(uint32_t)Voltage_Cell_2);
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	4619      	mov	r1, r3
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <Individual_Cell_Voltages_G0_Decoder+0x118>)
 8000336:	f000 f98d 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell3,(uint32_t)Voltage_Cell_3);
 800033a:	7b7b      	ldrb	r3, [r7, #13]
 800033c:	4619      	mov	r1, r3
 800033e:	4813      	ldr	r0, [pc, #76]	; (800038c <Individual_Cell_Voltages_G0_Decoder+0x11c>)
 8000340:	f000 f988 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell4,(uint32_t)Voltage_Cell_4);
 8000344:	7b3b      	ldrb	r3, [r7, #12]
 8000346:	4619      	mov	r1, r3
 8000348:	4811      	ldr	r0, [pc, #68]	; (8000390 <Individual_Cell_Voltages_G0_Decoder+0x120>)
 800034a:	f000 f983 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell5,(uint32_t)Voltage_Cell_5);
 800034e:	7afb      	ldrb	r3, [r7, #11]
 8000350:	4619      	mov	r1, r3
 8000352:	4810      	ldr	r0, [pc, #64]	; (8000394 <Individual_Cell_Voltages_G0_Decoder+0x124>)
 8000354:	f000 f97e 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell6,(uint32_t)Voltage_Cell_6);
 8000358:	7abb      	ldrb	r3, [r7, #10]
 800035a:	4619      	mov	r1, r3
 800035c:	480e      	ldr	r0, [pc, #56]	; (8000398 <Individual_Cell_Voltages_G0_Decoder+0x128>)
 800035e:	f000 f979 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell7,(uint32_t)Voltage_Cell_7);
 8000362:	7a7b      	ldrb	r3, [r7, #9]
 8000364:	4619      	mov	r1, r3
 8000366:	480d      	ldr	r0, [pc, #52]	; (800039c <Individual_Cell_Voltages_G0_Decoder+0x12c>)
 8000368:	f000 f974 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell8,(uint32_t)Voltage_Cell_8);
 800036c:	7a3b      	ldrb	r3, [r7, #8]
 800036e:	4619      	mov	r1, r3
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <Individual_Cell_Voltages_G0_Decoder+0x130>)
 8000372:	f000 f96f 	bl	8000654 <NEXTION_ChangeVal>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	51eb851f 	.word	0x51eb851f
 8000384:	08004a88 	.word	0x08004a88
 8000388:	08004a8c 	.word	0x08004a8c
 800038c:	08004a90 	.word	0x08004a90
 8000390:	08004a94 	.word	0x08004a94
 8000394:	08004a98 	.word	0x08004a98
 8000398:	08004a9c 	.word	0x08004a9c
 800039c:	08004aa0 	.word	0x08004aa0
 80003a0:	08004aa4 	.word	0x08004aa4

080003a4 <Individual_Cell_Voltages_G1_Decoder>:

void Individual_Cell_Voltages_G1_Decoder(uint8_t *data){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	uint8_t Voltage_Cell_13;
	uint8_t Voltage_Cell_14;
	uint8_t Voltage_Cell_15;
	uint8_t Voltage_Cell_16;

	Voltage_Cell_9=(data[0]+200)/100;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	33c8      	adds	r3, #200	; 0xc8
 80003b2:	4a40      	ldr	r2, [pc, #256]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 80003b4:	fb82 1203 	smull	r1, r2, r2, r3
 80003b8:	1152      	asrs	r2, r2, #5
 80003ba:	17db      	asrs	r3, r3, #31
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	73fb      	strb	r3, [r7, #15]
	Voltage_Cell_10=(data[1]+200)/100;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	33c8      	adds	r3, #200	; 0xc8
 80003c8:	4a3a      	ldr	r2, [pc, #232]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 80003ca:	fb82 1203 	smull	r1, r2, r2, r3
 80003ce:	1152      	asrs	r2, r2, #5
 80003d0:	17db      	asrs	r3, r3, #31
 80003d2:	1ad3      	subs	r3, r2, r3
 80003d4:	73bb      	strb	r3, [r7, #14]
	Voltage_Cell_11=(data[2]+200)/100;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3302      	adds	r3, #2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	33c8      	adds	r3, #200	; 0xc8
 80003de:	4a35      	ldr	r2, [pc, #212]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	1152      	asrs	r2, r2, #5
 80003e6:	17db      	asrs	r3, r3, #31
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	737b      	strb	r3, [r7, #13]
	Voltage_Cell_12=(data[3]+200)/100;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3303      	adds	r3, #3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	33c8      	adds	r3, #200	; 0xc8
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 80003f6:	fb82 1203 	smull	r1, r2, r2, r3
 80003fa:	1152      	asrs	r2, r2, #5
 80003fc:	17db      	asrs	r3, r3, #31
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	733b      	strb	r3, [r7, #12]
	Voltage_Cell_13=(data[4]+200)/100;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3304      	adds	r3, #4
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	33c8      	adds	r3, #200	; 0xc8
 800040a:	4a2a      	ldr	r2, [pc, #168]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 800040c:	fb82 1203 	smull	r1, r2, r2, r3
 8000410:	1152      	asrs	r2, r2, #5
 8000412:	17db      	asrs	r3, r3, #31
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	72fb      	strb	r3, [r7, #11]
	Voltage_Cell_14=(data[5]+200)/100;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3305      	adds	r3, #5
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	33c8      	adds	r3, #200	; 0xc8
 8000420:	4a24      	ldr	r2, [pc, #144]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	1152      	asrs	r2, r2, #5
 8000428:	17db      	asrs	r3, r3, #31
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	72bb      	strb	r3, [r7, #10]
	Voltage_Cell_15=(data[6]+200)/100;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3306      	adds	r3, #6
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	33c8      	adds	r3, #200	; 0xc8
 8000436:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 8000438:	fb82 1203 	smull	r1, r2, r2, r3
 800043c:	1152      	asrs	r2, r2, #5
 800043e:	17db      	asrs	r3, r3, #31
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	727b      	strb	r3, [r7, #9]
	Voltage_Cell_16=(data[7]+200)/100;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3307      	adds	r3, #7
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	33c8      	adds	r3, #200	; 0xc8
 800044c:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <Individual_Cell_Voltages_G1_Decoder+0x110>)
 800044e:	fb82 1203 	smull	r1, r2, r2, r3
 8000452:	1152      	asrs	r2, r2, #5
 8000454:	17db      	asrs	r3, r3, #31
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	723b      	strb	r3, [r7, #8]

	NEXTION_ChangeVal(dpObj_Cell9,(uint32_t)Voltage_Cell_9);
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	4619      	mov	r1, r3
 800045e:	4816      	ldr	r0, [pc, #88]	; (80004b8 <Individual_Cell_Voltages_G1_Decoder+0x114>)
 8000460:	f000 f8f8 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell10,(uint32_t)Voltage_Cell_10);
 8000464:	7bbb      	ldrb	r3, [r7, #14]
 8000466:	4619      	mov	r1, r3
 8000468:	4814      	ldr	r0, [pc, #80]	; (80004bc <Individual_Cell_Voltages_G1_Decoder+0x118>)
 800046a:	f000 f8f3 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell11,(uint32_t)Voltage_Cell_11);
 800046e:	7b7b      	ldrb	r3, [r7, #13]
 8000470:	4619      	mov	r1, r3
 8000472:	4813      	ldr	r0, [pc, #76]	; (80004c0 <Individual_Cell_Voltages_G1_Decoder+0x11c>)
 8000474:	f000 f8ee 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell12,(uint32_t)Voltage_Cell_12);
 8000478:	7b3b      	ldrb	r3, [r7, #12]
 800047a:	4619      	mov	r1, r3
 800047c:	4811      	ldr	r0, [pc, #68]	; (80004c4 <Individual_Cell_Voltages_G1_Decoder+0x120>)
 800047e:	f000 f8e9 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell13,(uint32_t)Voltage_Cell_13);
 8000482:	7afb      	ldrb	r3, [r7, #11]
 8000484:	4619      	mov	r1, r3
 8000486:	4810      	ldr	r0, [pc, #64]	; (80004c8 <Individual_Cell_Voltages_G1_Decoder+0x124>)
 8000488:	f000 f8e4 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell14,(uint32_t)Voltage_Cell_14);
 800048c:	7abb      	ldrb	r3, [r7, #10]
 800048e:	4619      	mov	r1, r3
 8000490:	480e      	ldr	r0, [pc, #56]	; (80004cc <Individual_Cell_Voltages_G1_Decoder+0x128>)
 8000492:	f000 f8df 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell15,(uint32_t)Voltage_Cell_15);
 8000496:	7a7b      	ldrb	r3, [r7, #9]
 8000498:	4619      	mov	r1, r3
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <Individual_Cell_Voltages_G1_Decoder+0x12c>)
 800049c:	f000 f8da 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell16,(uint32_t)Voltage_Cell_16);
 80004a0:	7a3b      	ldrb	r3, [r7, #8]
 80004a2:	4619      	mov	r1, r3
 80004a4:	480b      	ldr	r0, [pc, #44]	; (80004d4 <Individual_Cell_Voltages_G1_Decoder+0x130>)
 80004a6:	f000 f8d5 	bl	8000654 <NEXTION_ChangeVal>

}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	51eb851f 	.word	0x51eb851f
 80004b8:	08004aa8 	.word	0x08004aa8
 80004bc:	08004aac 	.word	0x08004aac
 80004c0:	08004ab0 	.word	0x08004ab0
 80004c4:	08004ab4 	.word	0x08004ab4
 80004c8:	08004ab8 	.word	0x08004ab8
 80004cc:	08004abc 	.word	0x08004abc
 80004d0:	08004ac0 	.word	0x08004ac0
 80004d4:	08004ac4 	.word	0x08004ac4

080004d8 <Individual_Cell_Voltages_G2_Decoder>:

void Individual_Cell_Voltages_G2_Decoder(uint8_t *data){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint8_t Voltage_Cell_19;
	uint8_t Voltage_Cell_20;
	uint8_t Voltage_Cell_21;
	uint8_t Voltage_Cell_22;

	Voltage_Cell_17=(data[0]+200)/100;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	33c8      	adds	r3, #200	; 0xc8
 80004e6:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <Individual_Cell_Voltages_G2_Decoder+0xd0>)
 80004e8:	fb82 1203 	smull	r1, r2, r2, r3
 80004ec:	1152      	asrs	r2, r2, #5
 80004ee:	17db      	asrs	r3, r3, #31
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	73fb      	strb	r3, [r7, #15]
	Voltage_Cell_18=(data[1]+200)/100;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	33c8      	adds	r3, #200	; 0xc8
 80004fc:	4a2a      	ldr	r2, [pc, #168]	; (80005a8 <Individual_Cell_Voltages_G2_Decoder+0xd0>)
 80004fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000502:	1152      	asrs	r2, r2, #5
 8000504:	17db      	asrs	r3, r3, #31
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	73bb      	strb	r3, [r7, #14]
	Voltage_Cell_19=(data[2]+200)/100;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3302      	adds	r3, #2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	33c8      	adds	r3, #200	; 0xc8
 8000512:	4a25      	ldr	r2, [pc, #148]	; (80005a8 <Individual_Cell_Voltages_G2_Decoder+0xd0>)
 8000514:	fb82 1203 	smull	r1, r2, r2, r3
 8000518:	1152      	asrs	r2, r2, #5
 800051a:	17db      	asrs	r3, r3, #31
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	737b      	strb	r3, [r7, #13]
	Voltage_Cell_20=(data[3]+200)/100;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3303      	adds	r3, #3
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	33c8      	adds	r3, #200	; 0xc8
 8000528:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <Individual_Cell_Voltages_G2_Decoder+0xd0>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1152      	asrs	r2, r2, #5
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	733b      	strb	r3, [r7, #12]
	Voltage_Cell_21=(data[4]+200)/100;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3304      	adds	r3, #4
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	33c8      	adds	r3, #200	; 0xc8
 800053e:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <Individual_Cell_Voltages_G2_Decoder+0xd0>)
 8000540:	fb82 1203 	smull	r1, r2, r2, r3
 8000544:	1152      	asrs	r2, r2, #5
 8000546:	17db      	asrs	r3, r3, #31
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	72fb      	strb	r3, [r7, #11]
	Voltage_Cell_22=(data[5]+200)/100;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3305      	adds	r3, #5
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	33c8      	adds	r3, #200	; 0xc8
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <Individual_Cell_Voltages_G2_Decoder+0xd0>)
 8000556:	fb82 1203 	smull	r1, r2, r2, r3
 800055a:	1152      	asrs	r2, r2, #5
 800055c:	17db      	asrs	r3, r3, #31
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	72bb      	strb	r3, [r7, #10]

	NEXTION_ChangeVal(dpObj_Cell17,(uint32_t)Voltage_Cell_17);
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4619      	mov	r1, r3
 8000566:	4811      	ldr	r0, [pc, #68]	; (80005ac <Individual_Cell_Voltages_G2_Decoder+0xd4>)
 8000568:	f000 f874 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell18,(uint32_t)Voltage_Cell_18);
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	4619      	mov	r1, r3
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <Individual_Cell_Voltages_G2_Decoder+0xd8>)
 8000572:	f000 f86f 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell19,(uint32_t)Voltage_Cell_19);
 8000576:	7b7b      	ldrb	r3, [r7, #13]
 8000578:	4619      	mov	r1, r3
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <Individual_Cell_Voltages_G2_Decoder+0xdc>)
 800057c:	f000 f86a 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell20,(uint32_t)Voltage_Cell_20);
 8000580:	7b3b      	ldrb	r3, [r7, #12]
 8000582:	4619      	mov	r1, r3
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <Individual_Cell_Voltages_G2_Decoder+0xe0>)
 8000586:	f000 f865 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell21,(uint32_t)Voltage_Cell_21);
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <Individual_Cell_Voltages_G2_Decoder+0xe4>)
 8000590:	f000 f860 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Cell22,(uint32_t)Voltage_Cell_22);
 8000594:	7abb      	ldrb	r3, [r7, #10]
 8000596:	4619      	mov	r1, r3
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <Individual_Cell_Voltages_G2_Decoder+0xe8>)
 800059a:	f000 f85b 	bl	8000654 <NEXTION_ChangeVal>

}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	51eb851f 	.word	0x51eb851f
 80005ac:	08004ac8 	.word	0x08004ac8
 80005b0:	08004acc 	.word	0x08004acc
 80005b4:	08004ad0 	.word	0x08004ad0
 80005b8:	08004ad4 	.word	0x08004ad4
 80005bc:	08004ad8 	.word	0x08004ad8
 80005c0:	08004adc 	.word	0x08004adc

080005c4 <State_Of_Charge_Decoder>:
void State_Of_Charge_Decoder(uint8_t *data){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint16_t Current;
	uint16_t Estimated_Charge;
	uint8_t  Estimated_Soc;

	Current = (data[1] | (data[0] << 8)) / 10;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	4313      	orrs	r3, r2
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <State_Of_Charge_Decoder+0x7c>)
 80005de:	fb82 1203 	smull	r1, r2, r2, r3
 80005e2:	1092      	asrs	r2, r2, #2
 80005e4:	17db      	asrs	r3, r3, #31
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	81fb      	strh	r3, [r7, #14]
	Estimated_Charge = (data[3] | (data[2] << 8)) / 10;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3303      	adds	r3, #3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3302      	adds	r3, #2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	4313      	orrs	r3, r2
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <State_Of_Charge_Decoder+0x7c>)
 80005fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000602:	1092      	asrs	r2, r2, #2
 8000604:	17db      	asrs	r3, r3, #31
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	81bb      	strh	r3, [r7, #12]
	Estimated_Soc = data[6];
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	72fb      	strb	r3, [r7, #11]

	NEXTION_ChangeVal(dpObj_Current,(uint32_t)Current);
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	4619      	mov	r1, r3
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <State_Of_Charge_Decoder+0x80>)
 8000616:	f000 f81d 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_EstimatedCharge,(uint32_t)Estimated_Charge);
 800061a:	89bb      	ldrh	r3, [r7, #12]
 800061c:	4619      	mov	r1, r3
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <State_Of_Charge_Decoder+0x84>)
 8000620:	f000 f818 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_EstimatedSOC,(uint32_t)Estimated_Soc);
 8000624:	7afb      	ldrb	r3, [r7, #11]
 8000626:	4619      	mov	r1, r3
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <State_Of_Charge_Decoder+0x88>)
 800062a:	f000 f813 	bl	8000654 <NEXTION_ChangeVal>
	NEXTION_ChangeVal(dpObj_Battery,(uint32_t)Estimated_Soc);
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	4619      	mov	r1, r3
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <State_Of_Charge_Decoder+0x8c>)
 8000634:	f000 f80e 	bl	8000654 <NEXTION_ChangeVal>




}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	66666667 	.word	0x66666667
 8000644:	08004a7c 	.word	0x08004a7c
 8000648:	08004a80 	.word	0x08004a80
 800064c:	08004a84 	.word	0x08004a84
 8000650:	08004ae0 	.word	0x08004ae0

08000654 <NEXTION_ChangeVal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NEXTION_ChangeVal(const char *objName, uint32_t value){
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
	char buf[20];
	unsigned int len = sprintf(buf, "%s.val=%u", objName, value);
 800065e:	f107 0008 	add.w	r0, r7, #8
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <NEXTION_ChangeVal+0x38>)
 8000668:	f003 fd88 	bl	800417c <siprintf>
 800066c:	4603      	mov	r3, r0
 800066e:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart3, buf, len,UART_TIMEOUT);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	b29a      	uxth	r2, r3
 8000674:	f107 0108 	add.w	r1, r7, #8
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <NEXTION_ChangeVal+0x3c>)
 800067e:	f003 f931 	bl	80038e4 <HAL_UART_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	08004a70 	.word	0x08004a70
 8000690:	200000e8 	.word	0x200000e8

08000694 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800069e:	4a22      	ldr	r2, [pc, #136]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 fe86 	bl	80013b4 <HAL_CAN_GetRxMessage>
  if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50100) {
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d10d      	bne.n	80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d108      	bne.n	80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    	HAL_GPIO_TogglePin(LED_2_GPIO_Port,LED_2_Pin);
 80006ba:	2102      	movs	r1, #2
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f001 fc84 	bl	8001fcc <HAL_GPIO_TogglePin>
    	Individual_Cell_Voltages_G0_Decoder(RxData);
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80006c6:	f7ff fdd3 	bl	8000270 <Individual_Cell_Voltages_G0_Decoder>
  if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50100) {
 80006ca:	e026      	b.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
    }

  	else if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50101) {
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d108      	bne.n	80006e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d103      	bne.n	80006e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
    	Individual_Cell_Voltages_G1_Decoder(RxData);
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80006e0:	f7ff fe60 	bl	80003a4 <Individual_Cell_Voltages_G1_Decoder>
  	else if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50101) {
 80006e4:	e019      	b.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
    }

  	else if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50102) {
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d108      	bne.n	8000700 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d103      	bne.n	8000700 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    	Individual_Cell_Voltages_G2_Decoder(RxData);
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80006fa:	f7ff feed 	bl	80004d8 <Individual_Cell_Voltages_G2_Decoder>
  	else if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50102) {
 80006fe:	e00c      	b.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
    }

  	else if(RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == 0x19B50500) {
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d108      	bne.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d103      	bne.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
    	State_Of_Charge_Decoder(RxData);
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000714:	f7ff ff56 	bl	80005c4 <State_Of_Charge_Decoder>
    }
}
 8000718:	e7ff      	b.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000016c 	.word	0x2000016c
 8000728:	2000008c 	.word	0x2000008c
 800072c:	19b50100 	.word	0x19b50100
 8000730:	19b50101 	.word	0x19b50101
 8000734:	19b50102 	.word	0x19b50102
 8000738:	19b50500 	.word	0x19b50500

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 faca 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f842 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f916 	bl	8000978 <MX_GPIO_Init>
  MX_CAN_Init();
 800074c:	f000 f894 	bl	8000878 <MX_CAN_Init>
  MX_USART3_UART_Init();
 8000750:	f000 f8e2 	bl	8000918 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000754:	4819      	ldr	r0, [pc, #100]	; (80007bc <main+0x80>)
 8000756:	f000 fd0e 	bl	8001176 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800075a:	2102      	movs	r1, #2
 800075c:	4817      	ldr	r0, [pc, #92]	; (80007bc <main+0x80>)
 800075e:	f000 ff3b 	bl	80015d8 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TxHeader.DLC = 8;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <main+0x84>)
 8000764:	2208      	movs	r2, #8
 8000766:	611a      	str	r2, [r3, #16]
	  TxHeader.IDE = CAN_ID_STD;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0x84>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
	  TxHeader.StdId = 0x180;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <main+0x84>)
 8000770:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000774:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = CAN_RTR_DATA;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <main+0x84>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
	  TxData[0] = 80;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <main+0x88>)
 800077e:	2250      	movs	r2, #80	; 0x50
 8000780:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 81;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <main+0x88>)
 8000784:	2251      	movs	r2, #81	; 0x51
 8000786:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 82;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <main+0x88>)
 800078a:	2252      	movs	r2, #82	; 0x52
 800078c:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 83;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <main+0x88>)
 8000790:	2253      	movs	r2, #83	; 0x53
 8000792:	70da      	strb	r2, [r3, #3]
	  TxData[4] = 84;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <main+0x88>)
 8000796:	2254      	movs	r2, #84	; 0x54
 8000798:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 85;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <main+0x88>)
 800079c:	2255      	movs	r2, #85	; 0x55
 800079e:	715a      	strb	r2, [r3, #5]
	  TxData[6] = 86;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <main+0x88>)
 80007a2:	2256      	movs	r2, #86	; 0x56
 80007a4:	719a      	strb	r2, [r3, #6]
	  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <main+0x8c>)
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <main+0x88>)
 80007aa:	4905      	ldr	r1, [pc, #20]	; (80007c0 <main+0x84>)
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <main+0x80>)
 80007ae:	f000 fd26 	bl	80011fe <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b6:	f000 faf5 	bl	8000da4 <HAL_Delay>
	  TxHeader.DLC = 8;
 80007ba:	e7d2      	b.n	8000762 <main+0x26>
 80007bc:	200000c0 	.word	0x200000c0
 80007c0:	200000a8 	.word	0x200000a8
 80007c4:	20000174 	.word	0x20000174
 80007c8:	2000017c 	.word	0x2000017c

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09e      	sub	sp, #120	; 0x78
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007d6:	2228      	movs	r2, #40	; 0x28
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fcc6 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	223c      	movs	r2, #60	; 0x3c
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fcb8 	bl	800416c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000810:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000814:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fbf0 	bl	8002000 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000826:	f000 f8f7 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800083e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000842:	2101      	movs	r1, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fc19 	bl	800307c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000850:	f000 f8e2 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000854:	2304      	movs	r3, #4
 8000856:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fe42 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800086a:	f000 f8d5 	bl	8000a18 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3778      	adds	r7, #120	; 0x78
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_CAN_Init+0x98>)
 8000880:	4a24      	ldr	r2, [pc, #144]	; (8000914 <MX_CAN_Init+0x9c>)
 8000882:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_CAN_Init+0x98>)
 8000886:	2220      	movs	r2, #32
 8000888:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_CAN_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_CAN_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_CAN_Init+0x98>)
 8000898:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800089c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_CAN_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_CAN_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_CAN_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_CAN_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_CAN_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_CAN_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_CAN_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_CAN_Init+0x98>)
 80008ca:	f000 fa8f 	bl	8000dec <HAL_CAN_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 f8a0 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

     canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
     canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 80008dc:	230a      	movs	r3, #10
 80008de:	617b      	str	r3, [r7, #20]
     canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
     canfilterconfig.FilterIdHigh = 0x0000;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
     canfilterconfig.FilterIdLow = 0x0000;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
     canfilterconfig.FilterMaskIdHigh = 0x0000;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
     canfilterconfig.FilterMaskIdLow = 0x0000;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
     canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
     canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
     

     HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <MX_CAN_Init+0x98>)
 8000902:	f000 fb6e 	bl	8000fe2 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000c0 	.word	0x200000c0
 8000914:	40006400 	.word	0x40006400

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART3_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000924:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800095c:	f002 ff74 	bl	8003848 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f857 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000e8 	.word	0x200000e8
 8000974:	40004800 	.word	0x40004800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_GPIO_Init+0x9c>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <MX_GPIO_Init+0x9c>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_GPIO_Init+0x9c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x9c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <MX_GPIO_Init+0x9c>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_GPIO_Init+0x9c>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2102      	movs	r1, #2
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f001 fae9 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f001 f960 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fa:	2307      	movs	r3, #7
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f001 f94e 	bl	8001ca8 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_CAN_MspInit+0x8c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d130      	bne.n	8000af0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000adc:	f001 f8e4 	bl	8001ca8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2015      	movs	r0, #21
 8000ae6:	f001 f8a8 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000aea:	2015      	movs	r0, #21
 8000aec:	f001 f8c1 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40006400 	.word	0x40006400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d128      	bne.n	8000b78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b74:	f001 f898 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004800 	.word	0x40004800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000400 	.word	0x48000400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8c4 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <CAN_RX1_IRQHandler+0x10>)
 8000be6:	f000 fd1d 	bl	8001624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000c0 	.word	0x200000c0

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f003 fa78 	bl	8004118 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000a000 	.word	0x2000a000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	20000180 	.word	0x20000180
 8000c5c:	20000198 	.word	0x20000198

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0b      	ldr	r4, [pc, #44]	; (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cae:	f7ff ffd7 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f003 fa37 	bl	8004124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb6:	f7ff fd41 	bl	800073c <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cbc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc8:	08004b5c 	.word	0x08004b5c
  ldr r2, =_sbss
 8000ccc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd0:	20000198 	.word	0x20000198

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x28>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x28>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 ff9b 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe96 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 ffb3 	bl	8001c8e <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 ff7b 	bl	8001c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000184 	.word	0x20000184

08000d8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000184 	.word	0x20000184

08000da4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e0ed      	b.n	8000fda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fe2e 	bl	8000a6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e20:	f7ff ffb4 	bl	8000d8c <HAL_GetTick>
 8000e24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e26:	e012      	b.n	8000e4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e28:	f7ff ffb0 	bl	8000d8c <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	d90b      	bls.n	8000e4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2205      	movs	r2, #5
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0c5      	b.n	8000fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0e5      	beq.n	8000e28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0202 	bic.w	r2, r2, #2
 8000e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e6c:	f7ff ff8e 	bl	8000d8c <HAL_GetTick>
 8000e70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e72:	e012      	b.n	8000e9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e74:	f7ff ff8a 	bl	8000d8c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b0a      	cmp	r3, #10
 8000e80:	d90b      	bls.n	8000e9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2205      	movs	r2, #5
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e09f      	b.n	8000fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e5      	bne.n	8000e74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7e1b      	ldrb	r3, [r3, #24]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7e5b      	ldrb	r3, [r3, #25]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d108      	bne.n	8000eec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e007      	b.n	8000efc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7e9b      	ldrb	r3, [r3, #26]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d108      	bne.n	8000f16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0220 	orr.w	r2, r2, #32
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e007      	b.n	8000f26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0220 	bic.w	r2, r2, #32
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7edb      	ldrb	r3, [r3, #27]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0210 	bic.w	r2, r2, #16
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e007      	b.n	8000f50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0210 	orr.w	r2, r2, #16
 8000f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7f1b      	ldrb	r3, [r3, #28]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0208 	orr.w	r2, r2, #8
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0208 	bic.w	r2, r2, #8
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7f5b      	ldrb	r3, [r3, #29]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d108      	bne.n	8000f94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0204 	orr.w	r2, r2, #4
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0204 	bic.w	r2, r2, #4
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	ea42 0103 	orr.w	r1, r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ffa:	7cfb      	ldrb	r3, [r7, #19]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d003      	beq.n	8001008 <HAL_CAN_ConfigFilter+0x26>
 8001000:	7cfb      	ldrb	r3, [r7, #19]
 8001002:	2b02      	cmp	r3, #2
 8001004:	f040 80aa 	bne.w	800115c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2201      	movs	r2, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d123      	bne.n	800108a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001064:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3248      	adds	r2, #72	; 0x48
 800106a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	3348      	adds	r3, #72	; 0x48
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d122      	bne.n	80010d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	431a      	orrs	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3248      	adds	r2, #72	; 0x48
 80010b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	3348      	adds	r3, #72	; 0x48
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010f2:	e007      	b.n	8001104 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d109      	bne.n	8001120 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800111e:	e007      	b.n	8001130 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d107      	bne.n	8001148 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	431a      	orrs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800114e:	f023 0201 	bic.w	r2, r3, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	e006      	b.n	800116a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
  }
}
 800116a:	4618      	mov	r0, r3
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d12e      	bne.n	80011e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011a2:	f7ff fdf3 	bl	8000d8c <HAL_GetTick>
 80011a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011a8:	e012      	b.n	80011d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011aa:	f7ff fdef 	bl	8000d8c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	d90b      	bls.n	80011d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2205      	movs	r2, #5
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e012      	b.n	80011f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e5      	bne.n	80011aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e006      	b.n	80011f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
  }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011fe:	b480      	push	{r7}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001212:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d003      	beq.n	800122a <HAL_CAN_AddTxMessage+0x2c>
 8001222:	7ffb      	ldrb	r3, [r7, #31]
 8001224:	2b02      	cmp	r3, #2
 8001226:	f040 80b8 	bne.w	800139a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a0 	beq.w	800138a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	0e1b      	lsrs	r3, r3, #24
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d907      	bls.n	800126a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e09e      	b.n	80013a8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800126a:	2201      	movs	r2, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10d      	bne.n	8001298 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	6809      	ldr	r1, [r1, #0]
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	440b      	add	r3, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00f      	b.n	80012b8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a8:	68f9      	ldr	r1, [r7, #12]
 80012aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3318      	adds	r3, #24
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	440b      	add	r3, r1
 80012b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3318      	adds	r3, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	440b      	add	r3, r1
 80012c8:	3304      	adds	r3, #4
 80012ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	7d1b      	ldrb	r3, [r3, #20]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d111      	bne.n	80012f8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3318      	adds	r3, #24
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	3304      	adds	r3, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3318      	adds	r3, #24
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	440b      	add	r3, r1
 80012f4:	3304      	adds	r3, #4
 80012f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3307      	adds	r3, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	061a      	lsls	r2, r3, #24
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3306      	adds	r3, #6
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3305      	adds	r3, #5
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4313      	orrs	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	3204      	adds	r2, #4
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	ea43 0200 	orr.w	r2, r3, r0
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	440b      	add	r3, r1
 800132a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800132e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3303      	adds	r3, #3
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	061a      	lsls	r2, r3, #24
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3302      	adds	r3, #2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	4313      	orrs	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	4610      	mov	r0, r2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	6811      	ldr	r1, [r2, #0]
 8001356:	ea43 0200 	orr.w	r2, r3, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001364:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3318      	adds	r3, #24
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6811      	ldr	r1, [r2, #0]
 8001378:	f043 0201 	orr.w	r2, r3, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3318      	adds	r3, #24
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	440b      	add	r3, r1
 8001384:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e00e      	b.n	80013a8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e006      	b.n	80013a8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3724      	adds	r7, #36	; 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_GetRxMessage+0x24>
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	f040 80f3 	bne.w	80015be <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10e      	bne.n	80013fc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d116      	bne.n	800141a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0e7      	b.n	80015cc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0d8      	b.n	80015cc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	331b      	adds	r3, #27
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0204 	and.w	r2, r3, #4
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10c      	bne.n	8001452 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	331b      	adds	r3, #27
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	0d5b      	lsrs	r3, r3, #21
 8001448:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e00b      	b.n	800146a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	331b      	adds	r3, #27
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	331b      	adds	r3, #27
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0202 	and.w	r2, r3, #2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	331b      	adds	r3, #27
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4413      	add	r3, r2
 800148c:	3304      	adds	r3, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 020f 	and.w	r2, r3, #15
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	331b      	adds	r3, #27
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	331b      	adds	r3, #27
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	3304      	adds	r3, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0a1a      	lsrs	r2, r3, #8
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4413      	add	r3, r2
 8001502:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0c1a      	lsrs	r2, r3, #16
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3302      	adds	r3, #2
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	0e1a      	lsrs	r2, r3, #24
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3303      	adds	r3, #3
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3304      	adds	r3, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0a1a      	lsrs	r2, r3, #8
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3305      	adds	r3, #5
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0c1a      	lsrs	r2, r3, #16
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3306      	adds	r3, #6
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0e1a      	lsrs	r2, r3, #24
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3307      	adds	r3, #7
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e006      	b.n	80015cc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d002      	beq.n	80015f6 <HAL_CAN_ActivateNotification+0x1e>
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d109      	bne.n	800160a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6959      	ldr	r1, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e006      	b.n	8001618 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d07c      	beq.n	8001764 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f983 	bl	8001992 <HAL_CAN_TxMailbox0CompleteCallback>
 800168c:	e016      	b.n	80016bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
 80016a0:	e00c      	b.n	80016bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
 80016b4:	e002      	b.n	80016bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f989 	bl	80019ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d024      	beq.n	8001710 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f963 	bl	80019a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80016e0:	e016      	b.n	8001710 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
 80016f4:	e00c      	b.n	8001710 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
 8001708:	e002      	b.n	8001710 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f969 	bl	80019e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001722:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f943 	bl	80019ba <HAL_CAN_TxMailbox2CompleteCallback>
 8001734:	e016      	b.n	8001764 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
 8001748:	e00c      	b.n	8001764 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	e002      	b.n	8001764 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f949 	bl	80019f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2210      	movs	r2, #16
 8001786:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f930 	bl	8001a0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7fe ff66 	bl	8000694 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2210      	movs	r2, #16
 80017ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f912 	bl	8001a32 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f8f9 	bl	8001a1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2210      	movs	r2, #16
 8001846:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f8fc 	bl	8001a46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2208      	movs	r2, #8
 8001868:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8f5 	bl	8001a5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d07b      	beq.n	8001972 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d072      	beq.n	800196a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d043      	beq.n	800196a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d03e      	beq.n	800196a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018f2:	2b60      	cmp	r3, #96	; 0x60
 80018f4:	d02b      	beq.n	800194e <HAL_CAN_IRQHandler+0x32a>
 80018f6:	2b60      	cmp	r3, #96	; 0x60
 80018f8:	d82e      	bhi.n	8001958 <HAL_CAN_IRQHandler+0x334>
 80018fa:	2b50      	cmp	r3, #80	; 0x50
 80018fc:	d022      	beq.n	8001944 <HAL_CAN_IRQHandler+0x320>
 80018fe:	2b50      	cmp	r3, #80	; 0x50
 8001900:	d82a      	bhi.n	8001958 <HAL_CAN_IRQHandler+0x334>
 8001902:	2b40      	cmp	r3, #64	; 0x40
 8001904:	d019      	beq.n	800193a <HAL_CAN_IRQHandler+0x316>
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d826      	bhi.n	8001958 <HAL_CAN_IRQHandler+0x334>
 800190a:	2b30      	cmp	r3, #48	; 0x30
 800190c:	d010      	beq.n	8001930 <HAL_CAN_IRQHandler+0x30c>
 800190e:	2b30      	cmp	r3, #48	; 0x30
 8001910:	d822      	bhi.n	8001958 <HAL_CAN_IRQHandler+0x334>
 8001912:	2b10      	cmp	r3, #16
 8001914:	d002      	beq.n	800191c <HAL_CAN_IRQHandler+0x2f8>
 8001916:	2b20      	cmp	r3, #32
 8001918:	d005      	beq.n	8001926 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800191a:	e01d      	b.n	8001958 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001924:	e019      	b.n	800195a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192e:	e014      	b.n	800195a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	f043 0320 	orr.w	r3, r3, #32
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001938:	e00f      	b.n	800195a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001942:	e00a      	b.n	800195a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194c:	e005      	b.n	800195a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001956:	e000      	b.n	800195a <HAL_CAN_IRQHandler+0x336>
            break;
 8001958:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001968:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2204      	movs	r2, #4
 8001970:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f872 	bl	8001a6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <__NVIC_EnableIRQ+0x38>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f7ff ff8e 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff29 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff3e 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff8e 	bl	8001b78 <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff31 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa2 	bl	8001be0 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e154      	b.n	8001f62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8146 	beq.w	8001f5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d005      	beq.n	8001ce8 <HAL_GPIO_Init+0x40>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d130      	bne.n	8001d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1e:	2201      	movs	r2, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f003 0201 	and.w	r2, r3, #1
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d017      	beq.n	8001d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d123      	bne.n	8001dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	6939      	ldr	r1, [r7, #16]
 8001dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0203 	and.w	r2, r3, #3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a0 	beq.w	8001f5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a57      	ldr	r2, [pc, #348]	; (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e34:	4a53      	ldr	r2, [pc, #332]	; (8001f84 <HAL_GPIO_Init+0x2dc>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e5e:	d019      	beq.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a49      	ldr	r2, [pc, #292]	; (8001f88 <HAL_GPIO_Init+0x2e0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1e8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a48      	ldr	r2, [pc, #288]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e4>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1e0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1dc>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e008      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e84:	2305      	movs	r3, #5
 8001e86:	e006      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e004      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e94:	2300      	movs	r3, #0
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4093      	lsls	r3, r2
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea6:	4937      	ldr	r1, [pc, #220]	; (8001f84 <HAL_GPIO_Init+0x2dc>)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ed8:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f02:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f2c:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f47f aea3 	bne.w	8001cb8 <HAL_GPIO_Init+0x10>
  }
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000
 8001f88:	48000400 	.word	0x48000400
 8001f8c:	48000800 	.word	0x48000800
 8001f90:	48000c00 	.word	0x48000c00
 8001f94:	48001000 	.word	0x48001000
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43d9      	mvns	r1, r3
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	400b      	ands	r3, r1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002006:	af00      	add	r7, sp, #0
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f001 b823 	b.w	800306c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 817d 	beq.w	8002336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800203c:	4bbc      	ldr	r3, [pc, #752]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b04      	cmp	r3, #4
 8002046:	d00c      	beq.n	8002062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002048:	4bb9      	ldr	r3, [pc, #740]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b08      	cmp	r3, #8
 8002052:	d15c      	bne.n	800210e <HAL_RCC_OscConfig+0x10e>
 8002054:	4bb6      	ldr	r3, [pc, #728]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d155      	bne.n	800210e <HAL_RCC_OscConfig+0x10e>
 8002062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x94>
 800208e:	4ba8      	ldr	r3, [pc, #672]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 8002094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020bc:	4b9c      	ldr	r3, [pc, #624]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f042 0220 	orr.w	r2, r2, #32
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f002 021f 	and.w	r2, r2, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 811f 	beq.w	8002334 <HAL_RCC_OscConfig+0x334>
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8116 	bne.w	8002334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 bfaf 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x12e>
 8002120:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a82      	ldr	r2, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e036      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x158>
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a78      	ldr	r2, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e021      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x184>
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a70      	ldr	r2, [pc, #448]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6d      	ldr	r2, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a66      	ldr	r2, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f023 020f 	bic.w	r2, r3, #15
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	495f      	ldr	r1, [pc, #380]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d059      	beq.n	800227a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fde1 	bl	8000d8c <HAL_GetTick>
 80021ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe fddc 	bl	8000d8c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d902      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f000 bf43 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80021e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x218>
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e015      	b.n	8002244 <HAL_RCC_OscConfig+0x244>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002248:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800224c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002250:	fa92 f2a2 	rbit	r2, r2
 8002254:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ab      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1d0>
 8002278:	e05d      	b.n	8002336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fd87 	bl	8000d8c <HAL_GetTick>
 800227e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fd82 	bl	8000d8c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d902      	bls.n	800229a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	f000 bee9 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 800229a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x2cc>
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f8>
 80022cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002300:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800230c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ab      	bne.n	8002284 <HAL_RCC_OscConfig+0x284>
 800232c:	e003      	b.n	8002336 <HAL_RCC_OscConfig+0x336>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 817d 	beq.w	8002646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800234c:	4ba6      	ldr	r3, [pc, #664]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002358:	4ba3      	ldr	r3, [pc, #652]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d172      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002364:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d16c      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002382:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3a0>
 800239a:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f002 021f 	and.w	r2, r2, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCC_OscConfig+0x410>
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d002      	beq.n	8002410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 be2e 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	21f8      	movs	r1, #248	; 0xf8
 8002426:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800242e:	fa91 f1a1 	rbit	r1, r1
 8002432:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002436:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800243a:	fab1 f181 	clz	r1, r1
 800243e:	b2c9      	uxtb	r1, r1
 8002440:	408b      	lsls	r3, r1
 8002442:	4969      	ldr	r1, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	e0fd      	b.n	8002646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8088 	beq.w	800256c <HAL_RCC_OscConfig+0x56c>
 800245c:	2301      	movs	r3, #1
 800245e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800246e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800247c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	2301      	movs	r3, #1
 8002486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fc80 	bl	8000d8c <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002492:	f7fe fc7b 	bl	8000d8c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d902      	bls.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	f000 bde2 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d8>
 80024d2:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e013      	b.n	8002500 <HAL_RCC_OscConfig+0x500>
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2202      	movs	r2, #2
 8002502:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002506:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002512:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002516:	fab2 f282 	clz	r2, r2
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f002 021f 	and.w	r2, r2, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0af      	beq.n	8002492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	21f8      	movs	r1, #248	; 0xf8
 8002548:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002550:	fa91 f1a1 	rbit	r1, r1
 8002554:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002558:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800255c:	fab1 f181 	clz	r1, r1
 8002560:	b2c9      	uxtb	r1, r1
 8002562:	408b      	lsls	r3, r1
 8002564:	4920      	ldr	r1, [pc, #128]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
 800256a:	e06c      	b.n	8002646 <HAL_RCC_OscConfig+0x646>
 800256c:	2301      	movs	r3, #1
 800256e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800257e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800258c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	461a      	mov	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fbf8 	bl	8000d8c <HAL_GetTick>
 800259c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fbf3 	bl	8000d8c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	f000 bd5a 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d104      	bne.n	80025ec <HAL_RCC_OscConfig+0x5ec>
 80025e2:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e015      	b.n	8002614 <HAL_RCC_OscConfig+0x614>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002610:	4bc8      	ldr	r3, [pc, #800]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2202      	movs	r2, #2
 8002616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800261a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ad      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8110 	beq.w	800287c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d079      	beq.n	8002760 <HAL_RCC_OscConfig+0x760>
 800266c:	2301      	movs	r3, #1
 800266e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800267e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4bab      	ldr	r3, [pc, #684]	; (8002938 <HAL_RCC_OscConfig+0x938>)
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	2301      	movs	r3, #1
 8002694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fb79 	bl	8000d8c <HAL_GetTick>
 800269a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe fb74 	bl	8000d8c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d902      	bls.n	80026b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	f000 bcdb 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800270e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800271c:	2102      	movs	r1, #2
 800271e:	6019      	str	r1, [r3, #0]
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f1a3 	rbit	r1, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002736:	6019      	str	r1, [r3, #0]
  return result;
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0a0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x6a0>
 800275e:	e08d      	b.n	800287c <HAL_RCC_OscConfig+0x87c>
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002782:	601a      	str	r2, [r3, #0]
  return result;
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800278c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x938>)
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	2300      	movs	r3, #0
 80027a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe faf3 	bl	8000d8c <HAL_GetTick>
 80027a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe faee 	bl	8000d8c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	f000 bc55 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800282c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800283a:	2102      	movs	r1, #2
 800283c:	6019      	str	r1, [r3, #0]
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f1a3 	rbit	r1, r3
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002854:	6019      	str	r1, [r3, #0]
  return result;
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d197      	bne.n	80027ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 81a1 	beq.w	8002bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	61d3      	str	r3, [r2, #28]
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fa4f 	bl	8000d8c <HAL_GetTick>
 80028ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	e009      	b.n	8002908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe fa4a 	bl	8000d8c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e3b1      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x940>
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a02      	ldr	r2, [pc, #8]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e03c      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	10908120 	.word	0x10908120
 800293c:	40007000 	.word	0x40007000
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x96a>
 8002950:	4bc1      	ldr	r3, [pc, #772]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4ac0      	ldr	r2, [pc, #768]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4bbe      	ldr	r3, [pc, #760]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4abd      	ldr	r2, [pc, #756]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e020      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x994>
 800297a:	4bb7      	ldr	r3, [pc, #732]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4ab6      	ldr	r2, [pc, #728]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4bb4      	ldr	r3, [pc, #720]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4ab3      	ldr	r2, [pc, #716]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 8002994:	4bb0      	ldr	r3, [pc, #704]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4aaf      	ldr	r2, [pc, #700]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	4bad      	ldr	r3, [pc, #692]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4aac      	ldr	r2, [pc, #688]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8081 	beq.w	8002ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fe f9e5 	bl	8000d8c <HAL_GetTick>
 80029c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe f9e0 	bl	8000d8c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e345      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0xa4c>
 8002a46:	4b84      	ldr	r3, [pc, #528]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0xa74>
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a54:	2202      	movs	r2, #2
 8002a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6011      	str	r1, [r2, #0]
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	fa92 f1a2 	rbit	r1, r2
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a96:	6011      	str	r1, [r2, #0]
  return result;
 8002a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d084      	beq.n	80029c8 <HAL_RCC_OscConfig+0x9c8>
 8002abe:	e07f      	b.n	8002bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe f964 	bl	8000d8c <HAL_GetTick>
 8002ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f95f 	bl	8000d8c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e2c4      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f2a3 	rbit	r2, r3
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b28:	601a      	str	r2, [r3, #0]
  return result;
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0xb4e>
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0xb76>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b56:	2202      	movs	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b98:	6011      	str	r1, [r2, #0]
  return result;
 8002b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d184      	bne.n	8002aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8242 	beq.w	800306a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	f000 8213 	beq.w	800301a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	f040 8162 	bne.w	8002eca <HAL_RCC_OscConfig+0xeca>
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f89e 	bl	8000d8c <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_OscConfig+0xc70>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe f896 	bl	8000d8c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1fd      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c94:	601a      	str	r2, [r3, #0]
  return result;
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0xcba>
 8002cb4:	4bb0      	ldr	r3, [pc, #704]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e027      	b.n	8002d0a <HAL_RCC_OscConfig+0xd0a>
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4b9c      	ldr	r3, [pc, #624]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d16:	6011      	str	r1, [r2, #0]
 8002d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fa92 f1a2 	rbit	r1, r2
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d2e:	6011      	str	r1, [r2, #0]
  return result;
 8002d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0220 	orr.w	r2, r2, #32
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d182      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	497f      	ldr	r1, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002da2:	601a      	str	r2, [r3, #0]
  return result;
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fd ffe2 	bl	8000d8c <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	e009      	b.n	8002de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fd ffdd 	bl	8000d8c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e144      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e06:	601a      	str	r2, [r3, #0]
  return result;
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0xe2c>
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_OscConfig+0xe7c>
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fa92 f1a2 	rbit	r1, r2
 8002e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ea0:	6011      	str	r1, [r2, #0]
  return result;
 8002ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d082      	beq.n	8002dce <HAL_RCC_OscConfig+0xdce>
 8002ec8:	e0cf      	b.n	800306a <HAL_RCC_OscConfig+0x106a>
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eee:	601a      	str	r2, [r3, #0]
  return result;
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd ff3c 	bl	8000d8c <HAL_GetTick>
 8002f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	e009      	b.n	8002f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fd ff37 	bl	8000d8c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e09e      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f52:	601a      	str	r2, [r3, #0]
  return result;
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d104      	bne.n	8002f7c <HAL_RCC_OscConfig+0xf7c>
 8002f72:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e029      	b.n	8002fcc <HAL_RCC_OscConfig+0xfcc>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x1078>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fa92 f1a2 	rbit	r1, r2
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d180      	bne.n	8002f1a <HAL_RCC_OscConfig+0xf1a>
 8003018:	e027      	b.n	800306a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01e      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x1078>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800303a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	429a      	cmp	r2, r3
 800304c:	d10b      	bne.n	8003066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800304e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09e      	sub	sp, #120	; 0x78
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e162      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	498b      	ldr	r1, [pc, #556]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e14a      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	497f      	ldr	r1, [pc, #508]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80dc 	beq.w	80032a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d13c      	bne.n	8003172 <HAL_RCC_ClockConfig+0xf6>
 80030f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_ClockConfig+0xa6>
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e00f      	b.n	8003142 <HAL_RCC_ClockConfig+0xc6>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
 8003130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003146:	65ba      	str	r2, [r7, #88]	; 0x58
 8003148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d17b      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0f3      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d13c      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x178>
 800317a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x128>
 800319e:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e00f      	b.n	80031c4 <HAL_RCC_ClockConfig+0x148>
 80031a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80031ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d13a      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b2      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80031f4:	2302      	movs	r3, #2
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_ClockConfig+0x1a0>
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e00d      	b.n	8003238 <HAL_RCC_ClockConfig+0x1bc>
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2202      	movs	r2, #2
 800323a:	61ba      	str	r2, [r7, #24]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	fa92 f2a2 	rbit	r2, r2
 8003242:	617a      	str	r2, [r7, #20]
  return result;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e079      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	491a      	ldr	r1, [pc, #104]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fd fd88 	bl	8000d8c <HAL_GetTick>
 800327c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fd fd84 	bl	8000d8c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e061      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d214      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4906      	ldr	r1, [pc, #24]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e040      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	491a      	ldr	r1, [pc, #104]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4912      	ldr	r1, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800331e:	f000 f829 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003322:	4601      	mov	r1, r0
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	22f0      	movs	r2, #240	; 0xf0
 800332e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	40d3      	lsrs	r3, r2
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x2ec>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	fa21 f303 	lsr.w	r3, r1, r3
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x2f0>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCC_ClockConfig+0x2f4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fcd6 	bl	8000d04 <HAL_InitTick>
  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3778      	adds	r7, #120	; 0x78
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	08004ae8 	.word	0x08004ae8
 800336c:	20000000 	.word	0x20000000
 8003370:	20000004 	.word	0x20000004

08003374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x30>
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x36>
 80033a2:	e03c      	b.n	800341e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033a6:	623b      	str	r3, [r7, #32]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	607a      	str	r2, [r7, #4]
  return result;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	40d3      	lsrs	r3, r2
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	220f      	movs	r2, #15
 80033d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa92 f2a2 	rbit	r2, r2
 80033e0:	60fa      	str	r2, [r7, #12]
  return result;
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	40d3      	lsrs	r3, r2
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	fbb2 f2f3 	udiv	r2, r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e004      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	623b      	str	r3, [r7, #32]
      break;
 800341c:	e002      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003420:	623b      	str	r3, [r7, #32]
      break;
 8003422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003424:	6a3b      	ldr	r3, [r7, #32]
}
 8003426:	4618      	mov	r0, r3
 8003428:	372c      	adds	r7, #44	; 0x2c
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
 800343c:	08004b00 	.word	0x08004b00
 8003440:	08004b10 	.word	0x08004b10
 8003444:	003d0900 	.word	0x003d0900

08003448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_GetHCLKFreq+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003466:	f7ff ffef 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 800346a:	4601      	mov	r1, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	603a      	str	r2, [r7, #0]
  return result;
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	40d3      	lsrs	r3, r2
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	08004af8 	.word	0x08004af8

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034aa:	f7ff ffcd 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	603a      	str	r2, [r7, #0]
  return result;
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	40d3      	lsrs	r3, r2
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08004af8 	.word	0x08004af8

080034e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b092      	sub	sp, #72	; 0x48
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80d4 	beq.w	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350c:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
 8003524:	4b48      	ldr	r3, [pc, #288]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b45      	ldr	r3, [pc, #276]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b42      	ldr	r3, [pc, #264]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a41      	ldr	r2, [pc, #260]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fd fc1d 	bl	8000d8c <HAL_GetTick>
 8003552:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fd fc19 	bl	8000d8c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	; 0x64
 8003562:	d901      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e169      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b38      	ldr	r3, [pc, #224]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003574:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8084 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003590:	429a      	cmp	r2, r3
 8003592:	d07c      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	461a      	mov	r2, r3
 80035be:	2301      	movs	r3, #1
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	461a      	mov	r2, r3
 80035e2:	2300      	movs	r3, #0
 80035e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d04b      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fd fbc9 	bl	8000d8c <HAL_GetTick>
 80035fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd fbc5 	bl	8000d8c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e113      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003614:	2302      	movs	r3, #2
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	61fb      	str	r3, [r7, #28]
  return result;
 800362c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d108      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003642:	4b01      	ldr	r3, [pc, #4]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	e00d      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003648:	40021000 	.word	0x40021000
 800364c:	40007000 	.word	0x40007000
 8003650:	10908100 	.word	0x10908100
 8003654:	2302      	movs	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	4b78      	ldr	r3, [pc, #480]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2202      	movs	r2, #2
 8003666:	613a      	str	r2, [r7, #16]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	60fa      	str	r2, [r7, #12]
  return result;
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0b7      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	496a      	ldr	r1, [pc, #424]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c0:	4b60      	ldr	r3, [pc, #384]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f023 0203 	bic.w	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	495d      	ldr	r1, [pc, #372]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4956      	ldr	r1, [pc, #344]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036fc:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	494e      	ldr	r1, [pc, #312]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f023 0210 	bic.w	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4947      	ldr	r1, [pc, #284]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	493f      	ldr	r1, [pc, #252]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f023 0220 	bic.w	r2, r3, #32
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4938      	ldr	r1, [pc, #224]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003774:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	4930      	ldr	r1, [pc, #192]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4929      	ldr	r1, [pc, #164]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	4921      	ldr	r1, [pc, #132]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	491a      	ldr	r1, [pc, #104]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	4912      	ldr	r1, [pc, #72]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	490b      	ldr	r1, [pc, #44]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3748      	adds	r7, #72	; 0x48
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e040      	b.n	80038dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd f94a 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8c0 	bl	8003a0c <UART_SetConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e022      	b.n	80038dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa8a 	bl	8003db8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fb11 	bl	8003efc <UART_CheckIdleState>
 80038da:	4603      	mov	r3, r0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	f040 8082 	bne.w	8003a02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_Transmit+0x26>
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07a      	b.n	8003a04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_UART_Transmit+0x38>
 8003918:	2302      	movs	r3, #2
 800391a:	e073      	b.n	8003a04 <HAL_UART_Transmit+0x120>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2221      	movs	r2, #33	; 0x21
 8003930:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003932:	f7fd fa2b 	bl	8000d8c <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d108      	bne.n	8003964 <HAL_UART_Transmit+0x80>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e003      	b.n	800396c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003974:	e02d      	b.n	80039d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb04 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e039      	b.n	8003a04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a2:	b292      	uxth	r2, r2
 80039a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	3302      	adds	r3, #2
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	e008      	b.n	80039c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	b292      	uxth	r2, r2
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1cb      	bne.n	8003976 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fad0 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e005      	b.n	8003a04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a3a:	f023 030c 	bic.w	r3, r3, #12
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6979      	ldr	r1, [r7, #20]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4aa8      	ldr	r2, [pc, #672]	; (8003d28 <UART_SetConfig+0x31c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d120      	bne.n	8003ace <UART_SetConfig+0xc2>
 8003a8c:	4ba7      	ldr	r3, [pc, #668]	; (8003d2c <UART_SetConfig+0x320>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d817      	bhi.n	8003ac8 <UART_SetConfig+0xbc>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x94>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ac3 	.word	0x08003ac3
 8003aac:	08003ab7 	.word	0x08003ab7
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e0b5      	b.n	8003c22 <UART_SetConfig+0x216>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e0b2      	b.n	8003c22 <UART_SetConfig+0x216>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e0af      	b.n	8003c22 <UART_SetConfig+0x216>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e0ac      	b.n	8003c22 <UART_SetConfig+0x216>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e0a9      	b.n	8003c22 <UART_SetConfig+0x216>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a97      	ldr	r2, [pc, #604]	; (8003d30 <UART_SetConfig+0x324>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d124      	bne.n	8003b22 <UART_SetConfig+0x116>
 8003ad8:	4b94      	ldr	r3, [pc, #592]	; (8003d2c <UART_SetConfig+0x320>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ae4:	d011      	beq.n	8003b0a <UART_SetConfig+0xfe>
 8003ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aea:	d817      	bhi.n	8003b1c <UART_SetConfig+0x110>
 8003aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af0:	d011      	beq.n	8003b16 <UART_SetConfig+0x10a>
 8003af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af6:	d811      	bhi.n	8003b1c <UART_SetConfig+0x110>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <UART_SetConfig+0xf8>
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d006      	beq.n	8003b10 <UART_SetConfig+0x104>
 8003b02:	e00b      	b.n	8003b1c <UART_SetConfig+0x110>
 8003b04:	2300      	movs	r3, #0
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e08b      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e088      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b10:	2304      	movs	r3, #4
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e085      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b16:	2308      	movs	r3, #8
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e082      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e07f      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <UART_SetConfig+0x328>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d124      	bne.n	8003b76 <UART_SetConfig+0x16a>
 8003b2c:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <UART_SetConfig+0x320>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b38:	d011      	beq.n	8003b5e <UART_SetConfig+0x152>
 8003b3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b3e:	d817      	bhi.n	8003b70 <UART_SetConfig+0x164>
 8003b40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b44:	d011      	beq.n	8003b6a <UART_SetConfig+0x15e>
 8003b46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b4a:	d811      	bhi.n	8003b70 <UART_SetConfig+0x164>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <UART_SetConfig+0x14c>
 8003b50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b54:	d006      	beq.n	8003b64 <UART_SetConfig+0x158>
 8003b56:	e00b      	b.n	8003b70 <UART_SetConfig+0x164>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e061      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e05e      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b64:	2304      	movs	r3, #4
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e05b      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e058      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b70:	2310      	movs	r3, #16
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e055      	b.n	8003c22 <UART_SetConfig+0x216>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6f      	ldr	r2, [pc, #444]	; (8003d38 <UART_SetConfig+0x32c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d124      	bne.n	8003bca <UART_SetConfig+0x1be>
 8003b80:	4b6a      	ldr	r3, [pc, #424]	; (8003d2c <UART_SetConfig+0x320>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b8c:	d011      	beq.n	8003bb2 <UART_SetConfig+0x1a6>
 8003b8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b92:	d817      	bhi.n	8003bc4 <UART_SetConfig+0x1b8>
 8003b94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b98:	d011      	beq.n	8003bbe <UART_SetConfig+0x1b2>
 8003b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9e:	d811      	bhi.n	8003bc4 <UART_SetConfig+0x1b8>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <UART_SetConfig+0x1a0>
 8003ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba8:	d006      	beq.n	8003bb8 <UART_SetConfig+0x1ac>
 8003baa:	e00b      	b.n	8003bc4 <UART_SetConfig+0x1b8>
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e037      	b.n	8003c22 <UART_SetConfig+0x216>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e034      	b.n	8003c22 <UART_SetConfig+0x216>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e031      	b.n	8003c22 <UART_SetConfig+0x216>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e02e      	b.n	8003c22 <UART_SetConfig+0x216>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e02b      	b.n	8003c22 <UART_SetConfig+0x216>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5b      	ldr	r2, [pc, #364]	; (8003d3c <UART_SetConfig+0x330>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d124      	bne.n	8003c1e <UART_SetConfig+0x212>
 8003bd4:	4b55      	ldr	r3, [pc, #340]	; (8003d2c <UART_SetConfig+0x320>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be0:	d011      	beq.n	8003c06 <UART_SetConfig+0x1fa>
 8003be2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be6:	d817      	bhi.n	8003c18 <UART_SetConfig+0x20c>
 8003be8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bec:	d011      	beq.n	8003c12 <UART_SetConfig+0x206>
 8003bee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf2:	d811      	bhi.n	8003c18 <UART_SetConfig+0x20c>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0x1f4>
 8003bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfc:	d006      	beq.n	8003c0c <UART_SetConfig+0x200>
 8003bfe:	e00b      	b.n	8003c18 <UART_SetConfig+0x20c>
 8003c00:	2300      	movs	r3, #0
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e00d      	b.n	8003c22 <UART_SetConfig+0x216>
 8003c06:	2302      	movs	r3, #2
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e00a      	b.n	8003c22 <UART_SetConfig+0x216>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e007      	b.n	8003c22 <UART_SetConfig+0x216>
 8003c12:	2308      	movs	r3, #8
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e004      	b.n	8003c22 <UART_SetConfig+0x216>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e001      	b.n	8003c22 <UART_SetConfig+0x216>
 8003c1e:	2310      	movs	r3, #16
 8003c20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2a:	d15c      	bne.n	8003ce6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003c2c:	7ffb      	ldrb	r3, [r7, #31]
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d827      	bhi.n	8003c82 <UART_SetConfig+0x276>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <UART_SetConfig+0x22c>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c73 	.word	0x08003c73
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7ff fc00 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8003c60:	61b8      	str	r0, [r7, #24]
        break;
 8003c62:	e013      	b.n	8003c8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7ff fc1e 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8003c68:	61b8      	str	r0, [r7, #24]
        break;
 8003c6a:	e00f      	b.n	8003c8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <UART_SetConfig+0x334>)
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e00c      	b.n	8003c8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7ff fb7f 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003c76:	61b8      	str	r0, [r7, #24]
        break;
 8003c78:	e008      	b.n	8003c8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7e:	61bb      	str	r3, [r7, #24]
        break;
 8003c80:	e004      	b.n	8003c8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8084 	beq.w	8003d9c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	005a      	lsls	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d916      	bls.n	8003ce0 <UART_SetConfig+0x2d4>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d212      	bcs.n	8003ce0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f023 030f 	bic.w	r3, r3, #15
 8003cc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	89fb      	ldrh	r3, [r7, #14]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	89fa      	ldrh	r2, [r7, #14]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	e05d      	b.n	8003d9c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77bb      	strb	r3, [r7, #30]
 8003ce4:	e05a      	b.n	8003d9c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce6:	7ffb      	ldrb	r3, [r7, #31]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d836      	bhi.n	8003d5a <UART_SetConfig+0x34e>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <UART_SetConfig+0x2e8>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	08003d45 	.word	0x08003d45
 8003d00:	08003d5b 	.word	0x08003d5b
 8003d04:	08003d4b 	.word	0x08003d4b
 8003d08:	08003d5b 	.word	0x08003d5b
 8003d0c:	08003d5b 	.word	0x08003d5b
 8003d10:	08003d5b 	.word	0x08003d5b
 8003d14:	08003d53 	.word	0x08003d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7ff fba2 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	61b8      	str	r0, [r7, #24]
        break;
 8003d1e:	e021      	b.n	8003d64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d20:	f7ff fbc0 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8003d24:	61b8      	str	r0, [r7, #24]
        break;
 8003d26:	e01d      	b.n	8003d64 <UART_SetConfig+0x358>
 8003d28:	40013800 	.word	0x40013800
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40004400 	.word	0x40004400
 8003d34:	40004800 	.word	0x40004800
 8003d38:	40004c00 	.word	0x40004c00
 8003d3c:	40005000 	.word	0x40005000
 8003d40:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <UART_SetConfig+0x3a8>)
 8003d46:	61bb      	str	r3, [r7, #24]
        break;
 8003d48:	e00c      	b.n	8003d64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4a:	f7ff fb13 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003d4e:	61b8      	str	r0, [r7, #24]
        break;
 8003d50:	e008      	b.n	8003d64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d56:	61bb      	str	r3, [r7, #24]
        break;
 8003d58:	e004      	b.n	8003d64 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77bb      	strb	r3, [r7, #30]
        break;
 8003d62:	bf00      	nop
    }

    if (pclk != 0U)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085a      	lsrs	r2, r3, #1
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b0f      	cmp	r3, #15
 8003d84:	d908      	bls.n	8003d98 <UART_SetConfig+0x38c>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d204      	bcs.n	8003d98 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	e001      	b.n	8003d9c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003da8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01a      	beq.n	8003ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d10a      	bne.n	8003ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f0c:	f7fc ff3e 	bl	8000d8c <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d10e      	bne.n	8003f3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f82d 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e023      	b.n	8003f86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d10e      	bne.n	8003f6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f817 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e00d      	b.n	8003f86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b09c      	sub	sp, #112	; 0x70
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	e0a5      	b.n	80040ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa6:	f000 80a1 	beq.w	80040ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fc feef 	bl	8000d8c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d13e      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e6      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	663b      	str	r3, [r7, #96]	; 0x60
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3308      	adds	r3, #8
 8004010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004012:	64ba      	str	r2, [r7, #72]	; 0x48
 8004014:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e067      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d04f      	beq.n	80040ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405a:	d147      	bne.n	80040ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004064:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800407a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
 8004086:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800408a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	613b      	str	r3, [r7, #16]
   return(result);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040b8:	623a      	str	r2, [r7, #32]
 80040ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69f9      	ldr	r1, [r7, #28]
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e010      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	4013      	ands	r3, r2
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	429a      	cmp	r2, r3
 8004108:	f43f af4a 	beq.w	8003fa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3770      	adds	r7, #112	; 0x70
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <__errno>:
 8004118:	4b01      	ldr	r3, [pc, #4]	; (8004120 <__errno+0x8>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	2000000c 	.word	0x2000000c

08004124 <__libc_init_array>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	4d0d      	ldr	r5, [pc, #52]	; (800415c <__libc_init_array+0x38>)
 8004128:	4c0d      	ldr	r4, [pc, #52]	; (8004160 <__libc_init_array+0x3c>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	2600      	movs	r6, #0
 8004130:	42a6      	cmp	r6, r4
 8004132:	d109      	bne.n	8004148 <__libc_init_array+0x24>
 8004134:	4d0b      	ldr	r5, [pc, #44]	; (8004164 <__libc_init_array+0x40>)
 8004136:	4c0c      	ldr	r4, [pc, #48]	; (8004168 <__libc_init_array+0x44>)
 8004138:	f000 fc8e 	bl	8004a58 <_init>
 800413c:	1b64      	subs	r4, r4, r5
 800413e:	10a4      	asrs	r4, r4, #2
 8004140:	2600      	movs	r6, #0
 8004142:	42a6      	cmp	r6, r4
 8004144:	d105      	bne.n	8004152 <__libc_init_array+0x2e>
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	f855 3b04 	ldr.w	r3, [r5], #4
 800414c:	4798      	blx	r3
 800414e:	3601      	adds	r6, #1
 8004150:	e7ee      	b.n	8004130 <__libc_init_array+0xc>
 8004152:	f855 3b04 	ldr.w	r3, [r5], #4
 8004156:	4798      	blx	r3
 8004158:	3601      	adds	r6, #1
 800415a:	e7f2      	b.n	8004142 <__libc_init_array+0x1e>
 800415c:	08004b54 	.word	0x08004b54
 8004160:	08004b54 	.word	0x08004b54
 8004164:	08004b54 	.word	0x08004b54
 8004168:	08004b58 	.word	0x08004b58

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <siprintf>:
 800417c:	b40e      	push	{r1, r2, r3}
 800417e:	b500      	push	{lr}
 8004180:	b09c      	sub	sp, #112	; 0x70
 8004182:	ab1d      	add	r3, sp, #116	; 0x74
 8004184:	9002      	str	r0, [sp, #8]
 8004186:	9006      	str	r0, [sp, #24]
 8004188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800418c:	4809      	ldr	r0, [pc, #36]	; (80041b4 <siprintf+0x38>)
 800418e:	9107      	str	r1, [sp, #28]
 8004190:	9104      	str	r1, [sp, #16]
 8004192:	4909      	ldr	r1, [pc, #36]	; (80041b8 <siprintf+0x3c>)
 8004194:	f853 2b04 	ldr.w	r2, [r3], #4
 8004198:	9105      	str	r1, [sp, #20]
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	a902      	add	r1, sp, #8
 80041a0:	f000 f868 	bl	8004274 <_svfiprintf_r>
 80041a4:	9b02      	ldr	r3, [sp, #8]
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	b01c      	add	sp, #112	; 0x70
 80041ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80041b0:	b003      	add	sp, #12
 80041b2:	4770      	bx	lr
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	ffff0208 	.word	0xffff0208

080041bc <__ssputs_r>:
 80041bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	688e      	ldr	r6, [r1, #8]
 80041c2:	429e      	cmp	r6, r3
 80041c4:	4682      	mov	sl, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	4690      	mov	r8, r2
 80041ca:	461f      	mov	r7, r3
 80041cc:	d838      	bhi.n	8004240 <__ssputs_r+0x84>
 80041ce:	898a      	ldrh	r2, [r1, #12]
 80041d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041d4:	d032      	beq.n	800423c <__ssputs_r+0x80>
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	6909      	ldr	r1, [r1, #16]
 80041da:	eba5 0901 	sub.w	r9, r5, r1
 80041de:	6965      	ldr	r5, [r4, #20]
 80041e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041e8:	3301      	adds	r3, #1
 80041ea:	444b      	add	r3, r9
 80041ec:	106d      	asrs	r5, r5, #1
 80041ee:	429d      	cmp	r5, r3
 80041f0:	bf38      	it	cc
 80041f2:	461d      	movcc	r5, r3
 80041f4:	0553      	lsls	r3, r2, #21
 80041f6:	d531      	bpl.n	800425c <__ssputs_r+0xa0>
 80041f8:	4629      	mov	r1, r5
 80041fa:	f000 fb63 	bl	80048c4 <_malloc_r>
 80041fe:	4606      	mov	r6, r0
 8004200:	b950      	cbnz	r0, 8004218 <__ssputs_r+0x5c>
 8004202:	230c      	movs	r3, #12
 8004204:	f8ca 3000 	str.w	r3, [sl]
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420e:	81a3      	strh	r3, [r4, #12]
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004218:	6921      	ldr	r1, [r4, #16]
 800421a:	464a      	mov	r2, r9
 800421c:	f000 fabe 	bl	800479c <memcpy>
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	6126      	str	r6, [r4, #16]
 800422e:	6165      	str	r5, [r4, #20]
 8004230:	444e      	add	r6, r9
 8004232:	eba5 0509 	sub.w	r5, r5, r9
 8004236:	6026      	str	r6, [r4, #0]
 8004238:	60a5      	str	r5, [r4, #8]
 800423a:	463e      	mov	r6, r7
 800423c:	42be      	cmp	r6, r7
 800423e:	d900      	bls.n	8004242 <__ssputs_r+0x86>
 8004240:	463e      	mov	r6, r7
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	4632      	mov	r2, r6
 8004246:	4641      	mov	r1, r8
 8004248:	f000 fab6 	bl	80047b8 <memmove>
 800424c:	68a3      	ldr	r3, [r4, #8]
 800424e:	1b9b      	subs	r3, r3, r6
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	4433      	add	r3, r6
 8004256:	6023      	str	r3, [r4, #0]
 8004258:	2000      	movs	r0, #0
 800425a:	e7db      	b.n	8004214 <__ssputs_r+0x58>
 800425c:	462a      	mov	r2, r5
 800425e:	f000 fba5 	bl	80049ac <_realloc_r>
 8004262:	4606      	mov	r6, r0
 8004264:	2800      	cmp	r0, #0
 8004266:	d1e1      	bne.n	800422c <__ssputs_r+0x70>
 8004268:	6921      	ldr	r1, [r4, #16]
 800426a:	4650      	mov	r0, sl
 800426c:	f000 fabe 	bl	80047ec <_free_r>
 8004270:	e7c7      	b.n	8004202 <__ssputs_r+0x46>
	...

08004274 <_svfiprintf_r>:
 8004274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	4698      	mov	r8, r3
 800427a:	898b      	ldrh	r3, [r1, #12]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	b09d      	sub	sp, #116	; 0x74
 8004280:	4607      	mov	r7, r0
 8004282:	460d      	mov	r5, r1
 8004284:	4614      	mov	r4, r2
 8004286:	d50e      	bpl.n	80042a6 <_svfiprintf_r+0x32>
 8004288:	690b      	ldr	r3, [r1, #16]
 800428a:	b963      	cbnz	r3, 80042a6 <_svfiprintf_r+0x32>
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	f000 fb19 	bl	80048c4 <_malloc_r>
 8004292:	6028      	str	r0, [r5, #0]
 8004294:	6128      	str	r0, [r5, #16]
 8004296:	b920      	cbnz	r0, 80042a2 <_svfiprintf_r+0x2e>
 8004298:	230c      	movs	r3, #12
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	e0d1      	b.n	8004446 <_svfiprintf_r+0x1d2>
 80042a2:	2340      	movs	r3, #64	; 0x40
 80042a4:	616b      	str	r3, [r5, #20]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9309      	str	r3, [sp, #36]	; 0x24
 80042aa:	2320      	movs	r3, #32
 80042ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b4:	2330      	movs	r3, #48	; 0x30
 80042b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004460 <_svfiprintf_r+0x1ec>
 80042ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042be:	f04f 0901 	mov.w	r9, #1
 80042c2:	4623      	mov	r3, r4
 80042c4:	469a      	mov	sl, r3
 80042c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ca:	b10a      	cbz	r2, 80042d0 <_svfiprintf_r+0x5c>
 80042cc:	2a25      	cmp	r2, #37	; 0x25
 80042ce:	d1f9      	bne.n	80042c4 <_svfiprintf_r+0x50>
 80042d0:	ebba 0b04 	subs.w	fp, sl, r4
 80042d4:	d00b      	beq.n	80042ee <_svfiprintf_r+0x7a>
 80042d6:	465b      	mov	r3, fp
 80042d8:	4622      	mov	r2, r4
 80042da:	4629      	mov	r1, r5
 80042dc:	4638      	mov	r0, r7
 80042de:	f7ff ff6d 	bl	80041bc <__ssputs_r>
 80042e2:	3001      	adds	r0, #1
 80042e4:	f000 80aa 	beq.w	800443c <_svfiprintf_r+0x1c8>
 80042e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ea:	445a      	add	r2, fp
 80042ec:	9209      	str	r2, [sp, #36]	; 0x24
 80042ee:	f89a 3000 	ldrb.w	r3, [sl]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80a2 	beq.w	800443c <_svfiprintf_r+0x1c8>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004302:	f10a 0a01 	add.w	sl, sl, #1
 8004306:	9304      	str	r3, [sp, #16]
 8004308:	9307      	str	r3, [sp, #28]
 800430a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800430e:	931a      	str	r3, [sp, #104]	; 0x68
 8004310:	4654      	mov	r4, sl
 8004312:	2205      	movs	r2, #5
 8004314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004318:	4851      	ldr	r0, [pc, #324]	; (8004460 <_svfiprintf_r+0x1ec>)
 800431a:	f7fb ff59 	bl	80001d0 <memchr>
 800431e:	9a04      	ldr	r2, [sp, #16]
 8004320:	b9d8      	cbnz	r0, 800435a <_svfiprintf_r+0xe6>
 8004322:	06d0      	lsls	r0, r2, #27
 8004324:	bf44      	itt	mi
 8004326:	2320      	movmi	r3, #32
 8004328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800432c:	0711      	lsls	r1, r2, #28
 800432e:	bf44      	itt	mi
 8004330:	232b      	movmi	r3, #43	; 0x2b
 8004332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004336:	f89a 3000 	ldrb.w	r3, [sl]
 800433a:	2b2a      	cmp	r3, #42	; 0x2a
 800433c:	d015      	beq.n	800436a <_svfiprintf_r+0xf6>
 800433e:	9a07      	ldr	r2, [sp, #28]
 8004340:	4654      	mov	r4, sl
 8004342:	2000      	movs	r0, #0
 8004344:	f04f 0c0a 	mov.w	ip, #10
 8004348:	4621      	mov	r1, r4
 800434a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800434e:	3b30      	subs	r3, #48	; 0x30
 8004350:	2b09      	cmp	r3, #9
 8004352:	d94e      	bls.n	80043f2 <_svfiprintf_r+0x17e>
 8004354:	b1b0      	cbz	r0, 8004384 <_svfiprintf_r+0x110>
 8004356:	9207      	str	r2, [sp, #28]
 8004358:	e014      	b.n	8004384 <_svfiprintf_r+0x110>
 800435a:	eba0 0308 	sub.w	r3, r0, r8
 800435e:	fa09 f303 	lsl.w	r3, r9, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	46a2      	mov	sl, r4
 8004368:	e7d2      	b.n	8004310 <_svfiprintf_r+0x9c>
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	9103      	str	r1, [sp, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfbb      	ittet	lt
 8004376:	425b      	neglt	r3, r3
 8004378:	f042 0202 	orrlt.w	r2, r2, #2
 800437c:	9307      	strge	r3, [sp, #28]
 800437e:	9307      	strlt	r3, [sp, #28]
 8004380:	bfb8      	it	lt
 8004382:	9204      	strlt	r2, [sp, #16]
 8004384:	7823      	ldrb	r3, [r4, #0]
 8004386:	2b2e      	cmp	r3, #46	; 0x2e
 8004388:	d10c      	bne.n	80043a4 <_svfiprintf_r+0x130>
 800438a:	7863      	ldrb	r3, [r4, #1]
 800438c:	2b2a      	cmp	r3, #42	; 0x2a
 800438e:	d135      	bne.n	80043fc <_svfiprintf_r+0x188>
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	9203      	str	r2, [sp, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfb8      	it	lt
 800439c:	f04f 33ff 	movlt.w	r3, #4294967295
 80043a0:	3402      	adds	r4, #2
 80043a2:	9305      	str	r3, [sp, #20]
 80043a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004470 <_svfiprintf_r+0x1fc>
 80043a8:	7821      	ldrb	r1, [r4, #0]
 80043aa:	2203      	movs	r2, #3
 80043ac:	4650      	mov	r0, sl
 80043ae:	f7fb ff0f 	bl	80001d0 <memchr>
 80043b2:	b140      	cbz	r0, 80043c6 <_svfiprintf_r+0x152>
 80043b4:	2340      	movs	r3, #64	; 0x40
 80043b6:	eba0 000a 	sub.w	r0, r0, sl
 80043ba:	fa03 f000 	lsl.w	r0, r3, r0
 80043be:	9b04      	ldr	r3, [sp, #16]
 80043c0:	4303      	orrs	r3, r0
 80043c2:	3401      	adds	r4, #1
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ca:	4826      	ldr	r0, [pc, #152]	; (8004464 <_svfiprintf_r+0x1f0>)
 80043cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043d0:	2206      	movs	r2, #6
 80043d2:	f7fb fefd 	bl	80001d0 <memchr>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d038      	beq.n	800444c <_svfiprintf_r+0x1d8>
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <_svfiprintf_r+0x1f4>)
 80043dc:	bb1b      	cbnz	r3, 8004426 <_svfiprintf_r+0x1b2>
 80043de:	9b03      	ldr	r3, [sp, #12]
 80043e0:	3307      	adds	r3, #7
 80043e2:	f023 0307 	bic.w	r3, r3, #7
 80043e6:	3308      	adds	r3, #8
 80043e8:	9303      	str	r3, [sp, #12]
 80043ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ec:	4433      	add	r3, r6
 80043ee:	9309      	str	r3, [sp, #36]	; 0x24
 80043f0:	e767      	b.n	80042c2 <_svfiprintf_r+0x4e>
 80043f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f6:	460c      	mov	r4, r1
 80043f8:	2001      	movs	r0, #1
 80043fa:	e7a5      	b.n	8004348 <_svfiprintf_r+0xd4>
 80043fc:	2300      	movs	r3, #0
 80043fe:	3401      	adds	r4, #1
 8004400:	9305      	str	r3, [sp, #20]
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0c0a 	mov.w	ip, #10
 8004408:	4620      	mov	r0, r4
 800440a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800440e:	3a30      	subs	r2, #48	; 0x30
 8004410:	2a09      	cmp	r2, #9
 8004412:	d903      	bls.n	800441c <_svfiprintf_r+0x1a8>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0c5      	beq.n	80043a4 <_svfiprintf_r+0x130>
 8004418:	9105      	str	r1, [sp, #20]
 800441a:	e7c3      	b.n	80043a4 <_svfiprintf_r+0x130>
 800441c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004420:	4604      	mov	r4, r0
 8004422:	2301      	movs	r3, #1
 8004424:	e7f0      	b.n	8004408 <_svfiprintf_r+0x194>
 8004426:	ab03      	add	r3, sp, #12
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	462a      	mov	r2, r5
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <_svfiprintf_r+0x1f8>)
 800442e:	a904      	add	r1, sp, #16
 8004430:	4638      	mov	r0, r7
 8004432:	f3af 8000 	nop.w
 8004436:	1c42      	adds	r2, r0, #1
 8004438:	4606      	mov	r6, r0
 800443a:	d1d6      	bne.n	80043ea <_svfiprintf_r+0x176>
 800443c:	89ab      	ldrh	r3, [r5, #12]
 800443e:	065b      	lsls	r3, r3, #25
 8004440:	f53f af2c 	bmi.w	800429c <_svfiprintf_r+0x28>
 8004444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004446:	b01d      	add	sp, #116	; 0x74
 8004448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444c:	ab03      	add	r3, sp, #12
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	462a      	mov	r2, r5
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <_svfiprintf_r+0x1f8>)
 8004454:	a904      	add	r1, sp, #16
 8004456:	4638      	mov	r0, r7
 8004458:	f000 f87a 	bl	8004550 <_printf_i>
 800445c:	e7eb      	b.n	8004436 <_svfiprintf_r+0x1c2>
 800445e:	bf00      	nop
 8004460:	08004b20 	.word	0x08004b20
 8004464:	08004b2a 	.word	0x08004b2a
 8004468:	00000000 	.word	0x00000000
 800446c:	080041bd 	.word	0x080041bd
 8004470:	08004b26 	.word	0x08004b26

08004474 <_printf_common>:
 8004474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	4616      	mov	r6, r2
 800447a:	4699      	mov	r9, r3
 800447c:	688a      	ldr	r2, [r1, #8]
 800447e:	690b      	ldr	r3, [r1, #16]
 8004480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004484:	4293      	cmp	r3, r2
 8004486:	bfb8      	it	lt
 8004488:	4613      	movlt	r3, r2
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004490:	4607      	mov	r7, r0
 8004492:	460c      	mov	r4, r1
 8004494:	b10a      	cbz	r2, 800449a <_printf_common+0x26>
 8004496:	3301      	adds	r3, #1
 8004498:	6033      	str	r3, [r6, #0]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	0699      	lsls	r1, r3, #26
 800449e:	bf42      	ittt	mi
 80044a0:	6833      	ldrmi	r3, [r6, #0]
 80044a2:	3302      	addmi	r3, #2
 80044a4:	6033      	strmi	r3, [r6, #0]
 80044a6:	6825      	ldr	r5, [r4, #0]
 80044a8:	f015 0506 	ands.w	r5, r5, #6
 80044ac:	d106      	bne.n	80044bc <_printf_common+0x48>
 80044ae:	f104 0a19 	add.w	sl, r4, #25
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	6832      	ldr	r2, [r6, #0]
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	dc26      	bgt.n	800450a <_printf_common+0x96>
 80044bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044c0:	1e13      	subs	r3, r2, #0
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	bf18      	it	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	0692      	lsls	r2, r2, #26
 80044ca:	d42b      	bmi.n	8004524 <_printf_common+0xb0>
 80044cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044d0:	4649      	mov	r1, r9
 80044d2:	4638      	mov	r0, r7
 80044d4:	47c0      	blx	r8
 80044d6:	3001      	adds	r0, #1
 80044d8:	d01e      	beq.n	8004518 <_printf_common+0xa4>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	68e5      	ldr	r5, [r4, #12]
 80044de:	6832      	ldr	r2, [r6, #0]
 80044e0:	f003 0306 	and.w	r3, r3, #6
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	bf08      	it	eq
 80044e8:	1aad      	subeq	r5, r5, r2
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	6922      	ldr	r2, [r4, #16]
 80044ee:	bf0c      	ite	eq
 80044f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f4:	2500      	movne	r5, #0
 80044f6:	4293      	cmp	r3, r2
 80044f8:	bfc4      	itt	gt
 80044fa:	1a9b      	subgt	r3, r3, r2
 80044fc:	18ed      	addgt	r5, r5, r3
 80044fe:	2600      	movs	r6, #0
 8004500:	341a      	adds	r4, #26
 8004502:	42b5      	cmp	r5, r6
 8004504:	d11a      	bne.n	800453c <_printf_common+0xc8>
 8004506:	2000      	movs	r0, #0
 8004508:	e008      	b.n	800451c <_printf_common+0xa8>
 800450a:	2301      	movs	r3, #1
 800450c:	4652      	mov	r2, sl
 800450e:	4649      	mov	r1, r9
 8004510:	4638      	mov	r0, r7
 8004512:	47c0      	blx	r8
 8004514:	3001      	adds	r0, #1
 8004516:	d103      	bne.n	8004520 <_printf_common+0xac>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004520:	3501      	adds	r5, #1
 8004522:	e7c6      	b.n	80044b2 <_printf_common+0x3e>
 8004524:	18e1      	adds	r1, r4, r3
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	2030      	movs	r0, #48	; 0x30
 800452a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800452e:	4422      	add	r2, r4
 8004530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004538:	3302      	adds	r3, #2
 800453a:	e7c7      	b.n	80044cc <_printf_common+0x58>
 800453c:	2301      	movs	r3, #1
 800453e:	4622      	mov	r2, r4
 8004540:	4649      	mov	r1, r9
 8004542:	4638      	mov	r0, r7
 8004544:	47c0      	blx	r8
 8004546:	3001      	adds	r0, #1
 8004548:	d0e6      	beq.n	8004518 <_printf_common+0xa4>
 800454a:	3601      	adds	r6, #1
 800454c:	e7d9      	b.n	8004502 <_printf_common+0x8e>
	...

08004550 <_printf_i>:
 8004550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	7e0f      	ldrb	r7, [r1, #24]
 8004556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004558:	2f78      	cmp	r7, #120	; 0x78
 800455a:	4691      	mov	r9, r2
 800455c:	4680      	mov	r8, r0
 800455e:	460c      	mov	r4, r1
 8004560:	469a      	mov	sl, r3
 8004562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004566:	d807      	bhi.n	8004578 <_printf_i+0x28>
 8004568:	2f62      	cmp	r7, #98	; 0x62
 800456a:	d80a      	bhi.n	8004582 <_printf_i+0x32>
 800456c:	2f00      	cmp	r7, #0
 800456e:	f000 80d8 	beq.w	8004722 <_printf_i+0x1d2>
 8004572:	2f58      	cmp	r7, #88	; 0x58
 8004574:	f000 80a3 	beq.w	80046be <_printf_i+0x16e>
 8004578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004580:	e03a      	b.n	80045f8 <_printf_i+0xa8>
 8004582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004586:	2b15      	cmp	r3, #21
 8004588:	d8f6      	bhi.n	8004578 <_printf_i+0x28>
 800458a:	a101      	add	r1, pc, #4	; (adr r1, 8004590 <_printf_i+0x40>)
 800458c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004590:	080045e9 	.word	0x080045e9
 8004594:	080045fd 	.word	0x080045fd
 8004598:	08004579 	.word	0x08004579
 800459c:	08004579 	.word	0x08004579
 80045a0:	08004579 	.word	0x08004579
 80045a4:	08004579 	.word	0x08004579
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004579 	.word	0x08004579
 80045b0:	08004579 	.word	0x08004579
 80045b4:	08004579 	.word	0x08004579
 80045b8:	08004579 	.word	0x08004579
 80045bc:	08004709 	.word	0x08004709
 80045c0:	0800462d 	.word	0x0800462d
 80045c4:	080046eb 	.word	0x080046eb
 80045c8:	08004579 	.word	0x08004579
 80045cc:	08004579 	.word	0x08004579
 80045d0:	0800472b 	.word	0x0800472b
 80045d4:	08004579 	.word	0x08004579
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	08004579 	.word	0x08004579
 80045e0:	08004579 	.word	0x08004579
 80045e4:	080046f3 	.word	0x080046f3
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	602a      	str	r2, [r5, #0]
 80045f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0a3      	b.n	8004744 <_printf_i+0x1f4>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	6829      	ldr	r1, [r5, #0]
 8004600:	0606      	lsls	r6, r0, #24
 8004602:	f101 0304 	add.w	r3, r1, #4
 8004606:	d50a      	bpl.n	800461e <_printf_i+0xce>
 8004608:	680e      	ldr	r6, [r1, #0]
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	2e00      	cmp	r6, #0
 800460e:	da03      	bge.n	8004618 <_printf_i+0xc8>
 8004610:	232d      	movs	r3, #45	; 0x2d
 8004612:	4276      	negs	r6, r6
 8004614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004618:	485e      	ldr	r0, [pc, #376]	; (8004794 <_printf_i+0x244>)
 800461a:	230a      	movs	r3, #10
 800461c:	e019      	b.n	8004652 <_printf_i+0x102>
 800461e:	680e      	ldr	r6, [r1, #0]
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004626:	bf18      	it	ne
 8004628:	b236      	sxthne	r6, r6
 800462a:	e7ef      	b.n	800460c <_printf_i+0xbc>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	1d19      	adds	r1, r3, #4
 8004632:	6029      	str	r1, [r5, #0]
 8004634:	0601      	lsls	r1, r0, #24
 8004636:	d501      	bpl.n	800463c <_printf_i+0xec>
 8004638:	681e      	ldr	r6, [r3, #0]
 800463a:	e002      	b.n	8004642 <_printf_i+0xf2>
 800463c:	0646      	lsls	r6, r0, #25
 800463e:	d5fb      	bpl.n	8004638 <_printf_i+0xe8>
 8004640:	881e      	ldrh	r6, [r3, #0]
 8004642:	4854      	ldr	r0, [pc, #336]	; (8004794 <_printf_i+0x244>)
 8004644:	2f6f      	cmp	r7, #111	; 0x6f
 8004646:	bf0c      	ite	eq
 8004648:	2308      	moveq	r3, #8
 800464a:	230a      	movne	r3, #10
 800464c:	2100      	movs	r1, #0
 800464e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004652:	6865      	ldr	r5, [r4, #4]
 8004654:	60a5      	str	r5, [r4, #8]
 8004656:	2d00      	cmp	r5, #0
 8004658:	bfa2      	ittt	ge
 800465a:	6821      	ldrge	r1, [r4, #0]
 800465c:	f021 0104 	bicge.w	r1, r1, #4
 8004660:	6021      	strge	r1, [r4, #0]
 8004662:	b90e      	cbnz	r6, 8004668 <_printf_i+0x118>
 8004664:	2d00      	cmp	r5, #0
 8004666:	d04d      	beq.n	8004704 <_printf_i+0x1b4>
 8004668:	4615      	mov	r5, r2
 800466a:	fbb6 f1f3 	udiv	r1, r6, r3
 800466e:	fb03 6711 	mls	r7, r3, r1, r6
 8004672:	5dc7      	ldrb	r7, [r0, r7]
 8004674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004678:	4637      	mov	r7, r6
 800467a:	42bb      	cmp	r3, r7
 800467c:	460e      	mov	r6, r1
 800467e:	d9f4      	bls.n	800466a <_printf_i+0x11a>
 8004680:	2b08      	cmp	r3, #8
 8004682:	d10b      	bne.n	800469c <_printf_i+0x14c>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	07de      	lsls	r6, r3, #31
 8004688:	d508      	bpl.n	800469c <_printf_i+0x14c>
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	6861      	ldr	r1, [r4, #4]
 800468e:	4299      	cmp	r1, r3
 8004690:	bfde      	ittt	le
 8004692:	2330      	movle	r3, #48	; 0x30
 8004694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800469c:	1b52      	subs	r2, r2, r5
 800469e:	6122      	str	r2, [r4, #16]
 80046a0:	f8cd a000 	str.w	sl, [sp]
 80046a4:	464b      	mov	r3, r9
 80046a6:	aa03      	add	r2, sp, #12
 80046a8:	4621      	mov	r1, r4
 80046aa:	4640      	mov	r0, r8
 80046ac:	f7ff fee2 	bl	8004474 <_printf_common>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d14c      	bne.n	800474e <_printf_i+0x1fe>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	b004      	add	sp, #16
 80046ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046be:	4835      	ldr	r0, [pc, #212]	; (8004794 <_printf_i+0x244>)
 80046c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046c4:	6829      	ldr	r1, [r5, #0]
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046cc:	6029      	str	r1, [r5, #0]
 80046ce:	061d      	lsls	r5, r3, #24
 80046d0:	d514      	bpl.n	80046fc <_printf_i+0x1ac>
 80046d2:	07df      	lsls	r7, r3, #31
 80046d4:	bf44      	itt	mi
 80046d6:	f043 0320 	orrmi.w	r3, r3, #32
 80046da:	6023      	strmi	r3, [r4, #0]
 80046dc:	b91e      	cbnz	r6, 80046e6 <_printf_i+0x196>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	f023 0320 	bic.w	r3, r3, #32
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	2310      	movs	r3, #16
 80046e8:	e7b0      	b.n	800464c <_printf_i+0xfc>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	f043 0320 	orr.w	r3, r3, #32
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	2378      	movs	r3, #120	; 0x78
 80046f4:	4828      	ldr	r0, [pc, #160]	; (8004798 <_printf_i+0x248>)
 80046f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046fa:	e7e3      	b.n	80046c4 <_printf_i+0x174>
 80046fc:	0659      	lsls	r1, r3, #25
 80046fe:	bf48      	it	mi
 8004700:	b2b6      	uxthmi	r6, r6
 8004702:	e7e6      	b.n	80046d2 <_printf_i+0x182>
 8004704:	4615      	mov	r5, r2
 8004706:	e7bb      	b.n	8004680 <_printf_i+0x130>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	6826      	ldr	r6, [r4, #0]
 800470c:	6961      	ldr	r1, [r4, #20]
 800470e:	1d18      	adds	r0, r3, #4
 8004710:	6028      	str	r0, [r5, #0]
 8004712:	0635      	lsls	r5, r6, #24
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	d501      	bpl.n	800471c <_printf_i+0x1cc>
 8004718:	6019      	str	r1, [r3, #0]
 800471a:	e002      	b.n	8004722 <_printf_i+0x1d2>
 800471c:	0670      	lsls	r0, r6, #25
 800471e:	d5fb      	bpl.n	8004718 <_printf_i+0x1c8>
 8004720:	8019      	strh	r1, [r3, #0]
 8004722:	2300      	movs	r3, #0
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	4615      	mov	r5, r2
 8004728:	e7ba      	b.n	80046a0 <_printf_i+0x150>
 800472a:	682b      	ldr	r3, [r5, #0]
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	602a      	str	r2, [r5, #0]
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	2100      	movs	r1, #0
 8004736:	4628      	mov	r0, r5
 8004738:	f7fb fd4a 	bl	80001d0 <memchr>
 800473c:	b108      	cbz	r0, 8004742 <_printf_i+0x1f2>
 800473e:	1b40      	subs	r0, r0, r5
 8004740:	6060      	str	r0, [r4, #4]
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	2300      	movs	r3, #0
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474c:	e7a8      	b.n	80046a0 <_printf_i+0x150>
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	462a      	mov	r2, r5
 8004752:	4649      	mov	r1, r9
 8004754:	4640      	mov	r0, r8
 8004756:	47d0      	blx	sl
 8004758:	3001      	adds	r0, #1
 800475a:	d0ab      	beq.n	80046b4 <_printf_i+0x164>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	079b      	lsls	r3, r3, #30
 8004760:	d413      	bmi.n	800478a <_printf_i+0x23a>
 8004762:	68e0      	ldr	r0, [r4, #12]
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	4298      	cmp	r0, r3
 8004768:	bfb8      	it	lt
 800476a:	4618      	movlt	r0, r3
 800476c:	e7a4      	b.n	80046b8 <_printf_i+0x168>
 800476e:	2301      	movs	r3, #1
 8004770:	4632      	mov	r2, r6
 8004772:	4649      	mov	r1, r9
 8004774:	4640      	mov	r0, r8
 8004776:	47d0      	blx	sl
 8004778:	3001      	adds	r0, #1
 800477a:	d09b      	beq.n	80046b4 <_printf_i+0x164>
 800477c:	3501      	adds	r5, #1
 800477e:	68e3      	ldr	r3, [r4, #12]
 8004780:	9903      	ldr	r1, [sp, #12]
 8004782:	1a5b      	subs	r3, r3, r1
 8004784:	42ab      	cmp	r3, r5
 8004786:	dcf2      	bgt.n	800476e <_printf_i+0x21e>
 8004788:	e7eb      	b.n	8004762 <_printf_i+0x212>
 800478a:	2500      	movs	r5, #0
 800478c:	f104 0619 	add.w	r6, r4, #25
 8004790:	e7f5      	b.n	800477e <_printf_i+0x22e>
 8004792:	bf00      	nop
 8004794:	08004b31 	.word	0x08004b31
 8004798:	08004b42 	.word	0x08004b42

0800479c <memcpy>:
 800479c:	440a      	add	r2, r1
 800479e:	4291      	cmp	r1, r2
 80047a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047a4:	d100      	bne.n	80047a8 <memcpy+0xc>
 80047a6:	4770      	bx	lr
 80047a8:	b510      	push	{r4, lr}
 80047aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047b2:	4291      	cmp	r1, r2
 80047b4:	d1f9      	bne.n	80047aa <memcpy+0xe>
 80047b6:	bd10      	pop	{r4, pc}

080047b8 <memmove>:
 80047b8:	4288      	cmp	r0, r1
 80047ba:	b510      	push	{r4, lr}
 80047bc:	eb01 0402 	add.w	r4, r1, r2
 80047c0:	d902      	bls.n	80047c8 <memmove+0x10>
 80047c2:	4284      	cmp	r4, r0
 80047c4:	4623      	mov	r3, r4
 80047c6:	d807      	bhi.n	80047d8 <memmove+0x20>
 80047c8:	1e43      	subs	r3, r0, #1
 80047ca:	42a1      	cmp	r1, r4
 80047cc:	d008      	beq.n	80047e0 <memmove+0x28>
 80047ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047d6:	e7f8      	b.n	80047ca <memmove+0x12>
 80047d8:	4402      	add	r2, r0
 80047da:	4601      	mov	r1, r0
 80047dc:	428a      	cmp	r2, r1
 80047de:	d100      	bne.n	80047e2 <memmove+0x2a>
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ea:	e7f7      	b.n	80047dc <memmove+0x24>

080047ec <_free_r>:
 80047ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ee:	2900      	cmp	r1, #0
 80047f0:	d044      	beq.n	800487c <_free_r+0x90>
 80047f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f6:	9001      	str	r0, [sp, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f1a1 0404 	sub.w	r4, r1, #4
 80047fe:	bfb8      	it	lt
 8004800:	18e4      	addlt	r4, r4, r3
 8004802:	f000 f913 	bl	8004a2c <__malloc_lock>
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <_free_r+0x94>)
 8004808:	9801      	ldr	r0, [sp, #4]
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	b933      	cbnz	r3, 800481c <_free_r+0x30>
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	6014      	str	r4, [r2, #0]
 8004812:	b003      	add	sp, #12
 8004814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004818:	f000 b90e 	b.w	8004a38 <__malloc_unlock>
 800481c:	42a3      	cmp	r3, r4
 800481e:	d908      	bls.n	8004832 <_free_r+0x46>
 8004820:	6825      	ldr	r5, [r4, #0]
 8004822:	1961      	adds	r1, r4, r5
 8004824:	428b      	cmp	r3, r1
 8004826:	bf01      	itttt	eq
 8004828:	6819      	ldreq	r1, [r3, #0]
 800482a:	685b      	ldreq	r3, [r3, #4]
 800482c:	1949      	addeq	r1, r1, r5
 800482e:	6021      	streq	r1, [r4, #0]
 8004830:	e7ed      	b.n	800480e <_free_r+0x22>
 8004832:	461a      	mov	r2, r3
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	b10b      	cbz	r3, 800483c <_free_r+0x50>
 8004838:	42a3      	cmp	r3, r4
 800483a:	d9fa      	bls.n	8004832 <_free_r+0x46>
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	1855      	adds	r5, r2, r1
 8004840:	42a5      	cmp	r5, r4
 8004842:	d10b      	bne.n	800485c <_free_r+0x70>
 8004844:	6824      	ldr	r4, [r4, #0]
 8004846:	4421      	add	r1, r4
 8004848:	1854      	adds	r4, r2, r1
 800484a:	42a3      	cmp	r3, r4
 800484c:	6011      	str	r1, [r2, #0]
 800484e:	d1e0      	bne.n	8004812 <_free_r+0x26>
 8004850:	681c      	ldr	r4, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	6053      	str	r3, [r2, #4]
 8004856:	4421      	add	r1, r4
 8004858:	6011      	str	r1, [r2, #0]
 800485a:	e7da      	b.n	8004812 <_free_r+0x26>
 800485c:	d902      	bls.n	8004864 <_free_r+0x78>
 800485e:	230c      	movs	r3, #12
 8004860:	6003      	str	r3, [r0, #0]
 8004862:	e7d6      	b.n	8004812 <_free_r+0x26>
 8004864:	6825      	ldr	r5, [r4, #0]
 8004866:	1961      	adds	r1, r4, r5
 8004868:	428b      	cmp	r3, r1
 800486a:	bf04      	itt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	bf04      	itt	eq
 8004874:	1949      	addeq	r1, r1, r5
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	6054      	str	r4, [r2, #4]
 800487a:	e7ca      	b.n	8004812 <_free_r+0x26>
 800487c:	b003      	add	sp, #12
 800487e:	bd30      	pop	{r4, r5, pc}
 8004880:	20000188 	.word	0x20000188

08004884 <sbrk_aligned>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4e0e      	ldr	r6, [pc, #56]	; (80048c0 <sbrk_aligned+0x3c>)
 8004888:	460c      	mov	r4, r1
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	4605      	mov	r5, r0
 800488e:	b911      	cbnz	r1, 8004896 <sbrk_aligned+0x12>
 8004890:	f000 f8bc 	bl	8004a0c <_sbrk_r>
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f8b7 	bl	8004a0c <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d00a      	beq.n	80048b8 <sbrk_aligned+0x34>
 80048a2:	1cc4      	adds	r4, r0, #3
 80048a4:	f024 0403 	bic.w	r4, r4, #3
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	d007      	beq.n	80048bc <sbrk_aligned+0x38>
 80048ac:	1a21      	subs	r1, r4, r0
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 f8ac 	bl	8004a0c <_sbrk_r>
 80048b4:	3001      	adds	r0, #1
 80048b6:	d101      	bne.n	80048bc <sbrk_aligned+0x38>
 80048b8:	f04f 34ff 	mov.w	r4, #4294967295
 80048bc:	4620      	mov	r0, r4
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	2000018c 	.word	0x2000018c

080048c4 <_malloc_r>:
 80048c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c8:	1ccd      	adds	r5, r1, #3
 80048ca:	f025 0503 	bic.w	r5, r5, #3
 80048ce:	3508      	adds	r5, #8
 80048d0:	2d0c      	cmp	r5, #12
 80048d2:	bf38      	it	cc
 80048d4:	250c      	movcc	r5, #12
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	4607      	mov	r7, r0
 80048da:	db01      	blt.n	80048e0 <_malloc_r+0x1c>
 80048dc:	42a9      	cmp	r1, r5
 80048de:	d905      	bls.n	80048ec <_malloc_r+0x28>
 80048e0:	230c      	movs	r3, #12
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	2600      	movs	r6, #0
 80048e6:	4630      	mov	r0, r6
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ec:	4e2e      	ldr	r6, [pc, #184]	; (80049a8 <_malloc_r+0xe4>)
 80048ee:	f000 f89d 	bl	8004a2c <__malloc_lock>
 80048f2:	6833      	ldr	r3, [r6, #0]
 80048f4:	461c      	mov	r4, r3
 80048f6:	bb34      	cbnz	r4, 8004946 <_malloc_r+0x82>
 80048f8:	4629      	mov	r1, r5
 80048fa:	4638      	mov	r0, r7
 80048fc:	f7ff ffc2 	bl	8004884 <sbrk_aligned>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	4604      	mov	r4, r0
 8004904:	d14d      	bne.n	80049a2 <_malloc_r+0xde>
 8004906:	6834      	ldr	r4, [r6, #0]
 8004908:	4626      	mov	r6, r4
 800490a:	2e00      	cmp	r6, #0
 800490c:	d140      	bne.n	8004990 <_malloc_r+0xcc>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	4631      	mov	r1, r6
 8004912:	4638      	mov	r0, r7
 8004914:	eb04 0803 	add.w	r8, r4, r3
 8004918:	f000 f878 	bl	8004a0c <_sbrk_r>
 800491c:	4580      	cmp	r8, r0
 800491e:	d13a      	bne.n	8004996 <_malloc_r+0xd2>
 8004920:	6821      	ldr	r1, [r4, #0]
 8004922:	3503      	adds	r5, #3
 8004924:	1a6d      	subs	r5, r5, r1
 8004926:	f025 0503 	bic.w	r5, r5, #3
 800492a:	3508      	adds	r5, #8
 800492c:	2d0c      	cmp	r5, #12
 800492e:	bf38      	it	cc
 8004930:	250c      	movcc	r5, #12
 8004932:	4629      	mov	r1, r5
 8004934:	4638      	mov	r0, r7
 8004936:	f7ff ffa5 	bl	8004884 <sbrk_aligned>
 800493a:	3001      	adds	r0, #1
 800493c:	d02b      	beq.n	8004996 <_malloc_r+0xd2>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	442b      	add	r3, r5
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	e00e      	b.n	8004964 <_malloc_r+0xa0>
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	1b52      	subs	r2, r2, r5
 800494a:	d41e      	bmi.n	800498a <_malloc_r+0xc6>
 800494c:	2a0b      	cmp	r2, #11
 800494e:	d916      	bls.n	800497e <_malloc_r+0xba>
 8004950:	1961      	adds	r1, r4, r5
 8004952:	42a3      	cmp	r3, r4
 8004954:	6025      	str	r5, [r4, #0]
 8004956:	bf18      	it	ne
 8004958:	6059      	strne	r1, [r3, #4]
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	bf08      	it	eq
 800495e:	6031      	streq	r1, [r6, #0]
 8004960:	5162      	str	r2, [r4, r5]
 8004962:	604b      	str	r3, [r1, #4]
 8004964:	4638      	mov	r0, r7
 8004966:	f104 060b 	add.w	r6, r4, #11
 800496a:	f000 f865 	bl	8004a38 <__malloc_unlock>
 800496e:	f026 0607 	bic.w	r6, r6, #7
 8004972:	1d23      	adds	r3, r4, #4
 8004974:	1af2      	subs	r2, r6, r3
 8004976:	d0b6      	beq.n	80048e6 <_malloc_r+0x22>
 8004978:	1b9b      	subs	r3, r3, r6
 800497a:	50a3      	str	r3, [r4, r2]
 800497c:	e7b3      	b.n	80048e6 <_malloc_r+0x22>
 800497e:	6862      	ldr	r2, [r4, #4]
 8004980:	42a3      	cmp	r3, r4
 8004982:	bf0c      	ite	eq
 8004984:	6032      	streq	r2, [r6, #0]
 8004986:	605a      	strne	r2, [r3, #4]
 8004988:	e7ec      	b.n	8004964 <_malloc_r+0xa0>
 800498a:	4623      	mov	r3, r4
 800498c:	6864      	ldr	r4, [r4, #4]
 800498e:	e7b2      	b.n	80048f6 <_malloc_r+0x32>
 8004990:	4634      	mov	r4, r6
 8004992:	6876      	ldr	r6, [r6, #4]
 8004994:	e7b9      	b.n	800490a <_malloc_r+0x46>
 8004996:	230c      	movs	r3, #12
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4638      	mov	r0, r7
 800499c:	f000 f84c 	bl	8004a38 <__malloc_unlock>
 80049a0:	e7a1      	b.n	80048e6 <_malloc_r+0x22>
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	e7de      	b.n	8004964 <_malloc_r+0xa0>
 80049a6:	bf00      	nop
 80049a8:	20000188 	.word	0x20000188

080049ac <_realloc_r>:
 80049ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b0:	4680      	mov	r8, r0
 80049b2:	4614      	mov	r4, r2
 80049b4:	460e      	mov	r6, r1
 80049b6:	b921      	cbnz	r1, 80049c2 <_realloc_r+0x16>
 80049b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049bc:	4611      	mov	r1, r2
 80049be:	f7ff bf81 	b.w	80048c4 <_malloc_r>
 80049c2:	b92a      	cbnz	r2, 80049d0 <_realloc_r+0x24>
 80049c4:	f7ff ff12 	bl	80047ec <_free_r>
 80049c8:	4625      	mov	r5, r4
 80049ca:	4628      	mov	r0, r5
 80049cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d0:	f000 f838 	bl	8004a44 <_malloc_usable_size_r>
 80049d4:	4284      	cmp	r4, r0
 80049d6:	4607      	mov	r7, r0
 80049d8:	d802      	bhi.n	80049e0 <_realloc_r+0x34>
 80049da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049de:	d812      	bhi.n	8004a06 <_realloc_r+0x5a>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4640      	mov	r0, r8
 80049e4:	f7ff ff6e 	bl	80048c4 <_malloc_r>
 80049e8:	4605      	mov	r5, r0
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d0ed      	beq.n	80049ca <_realloc_r+0x1e>
 80049ee:	42bc      	cmp	r4, r7
 80049f0:	4622      	mov	r2, r4
 80049f2:	4631      	mov	r1, r6
 80049f4:	bf28      	it	cs
 80049f6:	463a      	movcs	r2, r7
 80049f8:	f7ff fed0 	bl	800479c <memcpy>
 80049fc:	4631      	mov	r1, r6
 80049fe:	4640      	mov	r0, r8
 8004a00:	f7ff fef4 	bl	80047ec <_free_r>
 8004a04:	e7e1      	b.n	80049ca <_realloc_r+0x1e>
 8004a06:	4635      	mov	r5, r6
 8004a08:	e7df      	b.n	80049ca <_realloc_r+0x1e>
	...

08004a0c <_sbrk_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	; (8004a28 <_sbrk_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc f8ec 	bl	8000bf4 <_sbrk>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_sbrk_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_sbrk_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000190 	.word	0x20000190

08004a2c <__malloc_lock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	; (8004a34 <__malloc_lock+0x8>)
 8004a2e:	f000 b811 	b.w	8004a54 <__retarget_lock_acquire_recursive>
 8004a32:	bf00      	nop
 8004a34:	20000194 	.word	0x20000194

08004a38 <__malloc_unlock>:
 8004a38:	4801      	ldr	r0, [pc, #4]	; (8004a40 <__malloc_unlock+0x8>)
 8004a3a:	f000 b80c 	b.w	8004a56 <__retarget_lock_release_recursive>
 8004a3e:	bf00      	nop
 8004a40:	20000194 	.word	0x20000194

08004a44 <_malloc_usable_size_r>:
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f18      	subs	r0, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfbc      	itt	lt
 8004a4e:	580b      	ldrlt	r3, [r1, r0]
 8004a50:	18c0      	addlt	r0, r0, r3
 8004a52:	4770      	bx	lr

08004a54 <__retarget_lock_acquire_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <__retarget_lock_release_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <_init>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr

08004a64 <_fini>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr
