
Nextion_test_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e10  08005e10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e10  08005e10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000024c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c818  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd7  00000000  00000000  0002c8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b177  00000000  00000000  0002f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf72  00000000  00000000  0004a93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009db16  00000000  00000000  000568b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f43c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002950  00000000  00000000  000f4418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d3c 	.word	0x08005d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d3c 	.word	0x08005d3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_f2iz>:
 8000d08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d10:	d30f      	bcc.n	8000d32 <__aeabi_f2iz+0x2a>
 8000d12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_f2iz+0x30>
 8000d1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d28:	fa23 f002 	lsr.w	r0, r3, r2
 8000d2c:	bf18      	it	ne
 8000d2e:	4240      	negne	r0, r0
 8000d30:	4770      	bx	lr
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	4770      	bx	lr
 8000d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_f2iz+0x3a>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d105      	bne.n	8000d4e <__aeabi_f2iz+0x46>
 8000d42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d46:	bf08      	it	eq
 8000d48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	4770      	bx	lr

08000d54 <NEXTION_ChangeVal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NEXTION_ChangeVal(const char *objName, uint32_t value){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	char buf[20];
	unsigned int len = sprintf(buf, "%s.val=%u", objName, value);
 8000d5e:	f107 0008 	add.w	r0, r7, #8
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	490c      	ldr	r1, [pc, #48]	; (8000d98 <NEXTION_ChangeVal+0x44>)
 8000d68:	f004 fb7c 	bl	8005464 <siprintf>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart3, buf, len,UART_TIMEOUT);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	f107 0108 	add.w	r1, r7, #8
 8000d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <NEXTION_ChangeVal+0x48>)
 8000d7e:	f003 fd3d 	bl	80047fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, NextionMSG_END, NT_MSG_END_LENGTH,UART_TIMEOUT);
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	2203      	movs	r2, #3
 8000d88:	4905      	ldr	r1, [pc, #20]	; (8000da0 <NEXTION_ChangeVal+0x4c>)
 8000d8a:	4804      	ldr	r0, [pc, #16]	; (8000d9c <NEXTION_ChangeVal+0x48>)
 8000d8c:	f003 fd36 	bl	80047fc <HAL_UART_Transmit>
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08005d54 	.word	0x08005d54
 8000d9c:	2000016c 	.word	0x2000016c
 8000da0:	08005d78 	.word	0x08005d78

08000da4 <NEXTION_Changefloat>:

void NEXTION_Changefloat(const char *objName, float value){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	char buf[20];
	unsigned int len = sprintf(buf, "%s.val=%d", objName, (int)value);
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f7ff ffaa 	bl	8000d08 <__aeabi_f2iz>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f107 0008 	add.w	r0, r7, #8
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <NEXTION_Changefloat+0x4c>)
 8000dbe:	f004 fb51 	bl	8005464 <siprintf>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart3, buf, len,UART_TIMEOUT);
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	f107 0108 	add.w	r1, r7, #8
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	4808      	ldr	r0, [pc, #32]	; (8000df4 <NEXTION_Changefloat+0x50>)
 8000dd4:	f003 fd12 	bl	80047fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, NextionMSG_END, NT_MSG_END_LENGTH,UART_TIMEOUT);
 8000dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4906      	ldr	r1, [pc, #24]	; (8000df8 <NEXTION_Changefloat+0x54>)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <NEXTION_Changefloat+0x50>)
 8000de2:	f003 fd0b 	bl	80047fc <HAL_UART_Transmit>
}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08005d60 	.word	0x08005d60
 8000df4:	2000016c 	.word	0x2000016c
 8000df8:	08005d78 	.word	0x08005d78

08000dfc <NEXTION_UpdateDriveSelectButton>:

void NEXTION_UpdateDriveSelectButton(const char *objName, uint32_t value){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	char buf[20];
	unsigned int len = sprintf(buf, "%s.bco=%u", objName, (uint32_t)value);
 8000e06:	f107 0008 	add.w	r0, r7, #8
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	490c      	ldr	r1, [pc, #48]	; (8000e40 <NEXTION_UpdateDriveSelectButton+0x44>)
 8000e10:	f004 fb28 	bl	8005464 <siprintf>
 8000e14:	4603      	mov	r3, r0
 8000e16:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart3, buf, len,UART_TIMEOUT);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	f107 0108 	add.w	r1, r7, #8
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <NEXTION_UpdateDriveSelectButton+0x48>)
 8000e26:	f003 fce9 	bl	80047fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, NextionMSG_END, NT_MSG_END_LENGTH,UART_TIMEOUT);
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	2203      	movs	r2, #3
 8000e30:	4905      	ldr	r1, [pc, #20]	; (8000e48 <NEXTION_UpdateDriveSelectButton+0x4c>)
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <NEXTION_UpdateDriveSelectButton+0x48>)
 8000e34:	f003 fce2 	bl	80047fc <HAL_UART_Transmit>
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	08005d6c 	.word	0x08005d6c
 8000e44:	2000016c 	.word	0x2000016c
 8000e48:	08005d78 	.word	0x08005d78
 8000e4c:	00000000 	.word	0x00000000

08000e50 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_2_GPIO_Port,LED_2_Pin);

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000e58:	4b71      	ldr	r3, [pc, #452]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000e5a:	4a72      	ldr	r2, [pc, #456]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f001 f962 	bl	8002128 <HAL_CAN_GetRxMessage>
  if(RxHeader.StdId == 0x00 && RxHeader.IDE == CAN_ID_STD) {
 8000e64:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d12c      	bne.n	8000ec6 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 8000e6c:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d128      	bne.n	8000ec6 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
  	//HAL_GPIO_TogglePin(LED_2_GPIO_Port,LED_2_Pin);
  	int temp = RxData[0] << 8 | RxData[1];
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	4a69      	ldr	r2, [pc, #420]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000e7c:	7852      	ldrb	r2, [r2, #1]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  	if(temp >= 16383) {
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	dd03      	ble.n	8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
  		temp-= 65536;
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  	}
  	float value = (float)temp * 0.1274;
 8000e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e96:	f7ff fee3 	bl	8000c60 <__aeabi_i2f>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb4b 	bl	8000538 <__aeabi_f2d>
 8000ea2:	a35b      	add	r3, pc, #364	; (adr r3, 8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fb9e 	bl	80005e8 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fdca 	bl	8000a4c <__aeabi_d2f>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	61bb      	str	r3, [r7, #24]
  	NEXTION_Changefloat(dpObj_FrontAng, value);
 8000ebc:	69b9      	ldr	r1, [r7, #24]
 8000ebe:	485a      	ldr	r0, [pc, #360]	; (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000ec0:	f7ff ff70 	bl	8000da4 <NEXTION_Changefloat>
  if(RxHeader.StdId == 0x00 && RxHeader.IDE == CAN_ID_STD) {
 8000ec4:	e151      	b.n	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
  }

  	else if(RxHeader.StdId == 0x180 && RxHeader.IDE == CAN_ID_STD) {
 8000ec6:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000ece:	d12e      	bne.n	8000f2e <HAL_CAN_RxFifo0MsgPendingCallback+0xde>
 8000ed0:	4b54      	ldr	r3, [pc, #336]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d12a      	bne.n	8000f2e <HAL_CAN_RxFifo0MsgPendingCallback+0xde>
    	//HAL_GPIO_TogglePin(LED_2_GPIO_Port,LED_2_Pin);
    	int temp = RxData[1] << 8 | RxData[0];
 8000ed8:	4b51      	ldr	r3, [pc, #324]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	623b      	str	r3, [r7, #32]
    	if(temp >= 16383){
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000eec:	4293      	cmp	r3, r2
 8000eee:	dd03      	ble.n	8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
    		temp -=65536;
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000ef6:	623b      	str	r3, [r7, #32]
    	}
    	float value = temp * 0.0637;
 8000ef8:	6a38      	ldr	r0, [r7, #32]
 8000efa:	f7ff fb0b 	bl	8000514 <__aeabi_i2d>
 8000efe:	a346      	add	r3, pc, #280	; (adr r3, 8001018 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	f7ff fb70 	bl	80005e8 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fd9c 	bl	8000a4c <__aeabi_d2f>
 8000f14:	4603      	mov	r3, r0
 8000f16:	617b      	str	r3, [r7, #20]
    	 value += 200;
 8000f18:	4944      	ldr	r1, [pc, #272]	; (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff fdec 	bl	8000af8 <__addsf3>
 8000f20:	4603      	mov	r3, r0
 8000f22:	617b      	str	r3, [r7, #20]
    	NEXTION_Changefloat(dpObj_RearAng, value);
 8000f24:	6979      	ldr	r1, [r7, #20]
 8000f26:	4842      	ldr	r0, [pc, #264]	; (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000f28:	f7ff ff3c 	bl	8000da4 <NEXTION_Changefloat>
  	else if(RxHeader.StdId == 0x180 && RxHeader.IDE == CAN_ID_STD) {
 8000f2c:	e11d      	b.n	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>

    }
  	else if(RxHeader.StdId == DriveSelectID && RxHeader.IDE == CAN_ID_STD)
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f240 1295 	movw	r2, #405	; 0x195
 8000f36:	4293      	cmp	r3, r2
 8000f38:	f040 8084 	bne.w	8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d17f      	bne.n	8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
  	{
  		//Park
  		if(RxData[0] == 8)
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d114      	bne.n	8000f76 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
  		{
  			NEXTION_UpdateDriveSelectButton(dpObj_Park,BCO_RED);
 8000f4c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000f50:	4838      	ldr	r0, [pc, #224]	; (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000f52:	f7ff ff53 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Reverse,BCO_GRAY);
 8000f56:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000f5a:	4837      	ldr	r0, [pc, #220]	; (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000f5c:	f7ff ff4e 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Neutral,BCO_GRAY);
 8000f60:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000f64:	4835      	ldr	r0, [pc, #212]	; (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f66:	f7ff ff49 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Drive,BCO_GRAY);
 8000f6a:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000f6e:	4834      	ldr	r0, [pc, #208]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f70:	f7ff ff44 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
  		if(RxData[0] == 8)
 8000f74:	e0f8      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
  		}

  		//Reverse
  		else if(RxData[0] == 4)
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d114      	bne.n	8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
  		{
  			NEXTION_UpdateDriveSelectButton(dpObj_Park,BCO_GRAY);
 8000f7e:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000f82:	482c      	ldr	r0, [pc, #176]	; (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000f84:	f7ff ff3a 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Reverse,BCO_RED);
 8000f88:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000f8c:	482a      	ldr	r0, [pc, #168]	; (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000f8e:	f7ff ff35 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Neutral,BCO_GRAY);
 8000f92:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000f96:	4829      	ldr	r0, [pc, #164]	; (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f98:	f7ff ff30 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Drive,BCO_GRAY);
 8000f9c:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000fa0:	4827      	ldr	r0, [pc, #156]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000fa2:	f7ff ff2b 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
  		if(RxData[0] == 8)
 8000fa6:	e0df      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
  		}

  		//Neutral
  		else if(RxData[0] == 2)
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d114      	bne.n	8000fda <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
  		{
  			NEXTION_UpdateDriveSelectButton(dpObj_Park,BCO_GRAY);
 8000fb0:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000fb4:	481f      	ldr	r0, [pc, #124]	; (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000fb6:	f7ff ff21 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Reverse,BCO_GRAY);
 8000fba:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000fbe:	481e      	ldr	r0, [pc, #120]	; (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000fc0:	f7ff ff1c 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Neutral,BCO_RED);
 8000fc4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000fc8:	481c      	ldr	r0, [pc, #112]	; (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000fca:	f7ff ff17 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Drive,BCO_GRAY);
 8000fce:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000fd2:	481b      	ldr	r0, [pc, #108]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000fd4:	f7ff ff12 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
  		if(RxData[0] == 8)
 8000fd8:	e0c6      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
  		}

  		//Drive
  		else if(RxData[0] == 1)
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	f040 80c2 	bne.w	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
  		{
  			NEXTION_UpdateDriveSelectButton(dpObj_Park,BCO_GRAY);
 8000fe4:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000fea:	f7ff ff07 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Reverse,BCO_GRAY);
 8000fee:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000ff2:	4811      	ldr	r0, [pc, #68]	; (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000ff4:	f7ff ff02 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Neutral,BCO_GRAY);
 8000ff8:	f24c 6118 	movw	r1, #50712	; 0xc618
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000ffe:	f7ff fefd 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
			NEXTION_UpdateDriveSelectButton(dpObj_Drive,BCO_RED);
 8001002:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001008:	f7ff fef8 	bl	8000dfc <NEXTION_UpdateDriveSelectButton>
  		if(RxData[0] == 8)
 800100c:	e0ac      	b.n	8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
 800100e:	bf00      	nop
 8001010:	a8c154ca 	.word	0xa8c154ca
 8001014:	3fc04ea4 	.word	0x3fc04ea4
 8001018:	a8c154ca 	.word	0xa8c154ca
 800101c:	3fb04ea4 	.word	0x3fb04ea4
 8001020:	20000280 	.word	0x20000280
 8001024:	200000a4 	.word	0x200000a4
 8001028:	08005d84 	.word	0x08005d84
 800102c:	43480000 	.word	0x43480000
 8001030:	08005d8c 	.word	0x08005d8c
 8001034:	08005d94 	.word	0x08005d94
 8001038:	08005d98 	.word	0x08005d98
 800103c:	08005d9c 	.word	0x08005d9c
 8001040:	08005da0 	.word	0x08005da0
  		}
  	}
  	else if(RxHeader.StdId == 0x01 && RxHeader.IDE == CAN_ID_STD)
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 808e 	bne.w	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8089 	bne.w	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
  	{
  		uint16_t WheelSpeedRight = RxData[0] << 8 | RxData[1];
 8001058:	4b4c      	ldr	r3, [pc, #304]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b4a      	ldr	r3, [pc, #296]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	827b      	strh	r3, [r7, #18]
  		uint16_t WheelSpeedLeft = RxData[2] << 8 | RxData[3];
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 800106e:	789b      	ldrb	r3, [r3, #2]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 8001076:	78db      	ldrb	r3, [r3, #3]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	823b      	strh	r3, [r7, #16]

  		WheelSpeedRight *= 2 * Pi / 3;
 8001080:	8a7b      	ldrh	r3, [r7, #18]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa46 	bl	8000514 <__aeabi_i2d>
 8001088:	4604      	mov	r4, r0
 800108a:	460d      	mov	r5, r1
 800108c:	a13a      	add	r1, pc, #232	; (adr r1, 8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>)
 800108e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	f7ff f8f1 	bl	800027c <__adddf3>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80010a8:	f7ff fbc8 	bl	800083c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fa98 	bl	80005e8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fca4 	bl	8000a0c <__aeabi_d2uiz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	827b      	strh	r3, [r7, #18]
  		WheelSpeedLeft *= 2 * Pi / 3;
 80010c8:	8a3b      	ldrh	r3, [r7, #16]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa22 	bl	8000514 <__aeabi_i2d>
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	a128      	add	r1, pc, #160	; (adr r1, 8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>)
 80010d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	f7ff f8cd 	bl	800027c <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80010f0:	f7ff fba4 	bl	800083c <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff fa74 	bl	80005e8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fc80 	bl	8000a0c <__aeabi_d2uiz>
 800110c:	4603      	mov	r3, r0
 800110e:	823b      	strh	r3, [r7, #16]


  		uint32_t Velocity = (WheelSpeedRight + WheelSpeedLeft) / 2 * 3.6;
 8001110:	8a7a      	ldrh	r2, [r7, #18]
 8001112:	8a3b      	ldrh	r3, [r7, #16]
 8001114:	4413      	add	r3, r2
 8001116:	0fda      	lsrs	r2, r3, #31
 8001118:	4413      	add	r3, r2
 800111a:	105b      	asrs	r3, r3, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9f9 	bl	8000514 <__aeabi_i2d>
 8001122:	a317      	add	r3, pc, #92	; (adr r3, 8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x330>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa5e 	bl	80005e8 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fc6a 	bl	8000a0c <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]

    	int GaugeVal = Velocity * 3;
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	61fb      	str	r3, [r7, #28]
    	if(GaugeVal > 270)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800114c:	dd02      	ble.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
    		GaugeVal = 270;
 800114e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001152:	61fb      	str	r3, [r7, #28]
  		NEXTION_ChangeVal(dpObj_SpeedMeter, Velocity);
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001158:	f7ff fdfc 	bl	8000d54 <NEXTION_ChangeVal>
  		NEXTION_ChangeVal(dpObj_SpeedGauge, GaugeVal);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	4619      	mov	r1, r3
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001162:	f7ff fdf7 	bl	8000d54 <NEXTION_ChangeVal>
  	}

  }
 8001166:	e000      	b.n	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
  		if(RxData[0] == 8)
 8001168:	bf00      	nop
  }
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	f01b866e 	.word	0xf01b866e
 800117c:	400921f9 	.word	0x400921f9
 8001180:	cccccccd 	.word	0xcccccccd
 8001184:	400ccccc 	.word	0x400ccccc
 8001188:	200000a4 	.word	0x200000a4
 800118c:	20000280 	.word	0x20000280
 8001190:	40080000 	.word	0x40080000
 8001194:	08005d80 	.word	0x08005d80
 8001198:	08005d7c 	.word	0x08005d7c

0800119c <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart,uint16_t size){
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
//		newPos = size+oldPos;
//	}


	/* start the DMA again */
	if(huart == &huart3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a51      	ldr	r2, [pc, #324]	; (80012f0 <HAL_UARTEx_RxEventCallback+0x154>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d17b      	bne.n	80012a8 <HAL_UARTEx_RxEventCallback+0x10c>
	{

	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3,tempUART_Rx,UART_TEMP_LENGTH);
 80011b0:	2204      	movs	r2, #4
 80011b2:	4950      	ldr	r1, [pc, #320]	; (80012f4 <HAL_UARTEx_RxEventCallback+0x158>)
 80011b4:	484e      	ldr	r0, [pc, #312]	; (80012f0 <HAL_UARTEx_RxEventCallback+0x154>)
 80011b6:	f004 f8c7 	bl	8005348 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80011ba:	4b4f      	ldr	r3, [pc, #316]	; (80012f8 <HAL_UARTEx_RxEventCallback+0x15c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <HAL_UARTEx_RxEventCallback+0x15c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0204 	bic.w	r2, r2, #4
 80011c8:	601a      	str	r2, [r3, #0]

	  for(int i = 0; i < size; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e066      	b.n	800129e <HAL_UARTEx_RxEventCallback+0x102>
	  {
		  if(tempUART_Rx[i] == 'P')
 80011d0:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_UARTEx_RxEventCallback+0x158>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b50      	cmp	r3, #80	; 0x50
 80011da:	d112      	bne.n	8001202 <HAL_UARTEx_RxEventCallback+0x66>
		  {
			  //HAL_GPIO_TogglePin(LED_2_GPIO_Port,LED_2_Pin);
			  TxHeader.DLC = 8;
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 80011de:	2208      	movs	r2, #8
 80011e0:	611a      	str	r2, [r3, #16]
			  TxHeader.StdId = DriveSelectID;
 80011e2:	f240 1295 	movw	r2, #405	; 0x195
 80011e6:	4b45      	ldr	r3, [pc, #276]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 80011e8:	601a      	str	r2, [r3, #0]
			  TxHeader.RTR = CAN_RTR_DATA;
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
			  TxData[0] = 8;
 80011f0:	4b43      	ldr	r3, [pc, #268]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	701a      	strb	r2, [r3, #0]
			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 80011f6:	4b43      	ldr	r3, [pc, #268]	; (8001304 <HAL_UARTEx_RxEventCallback+0x168>)
 80011f8:	4a41      	ldr	r2, [pc, #260]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 80011fa:	4940      	ldr	r1, [pc, #256]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 80011fc:	4842      	ldr	r0, [pc, #264]	; (8001308 <HAL_UARTEx_RxEventCallback+0x16c>)
 80011fe:	f000 feb9 	bl	8001f74 <HAL_CAN_AddTxMessage>
		  }

		  if(tempUART_Rx[i] == 'R')
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b52      	cmp	r3, #82	; 0x52
 800120c:	d112      	bne.n	8001234 <HAL_UARTEx_RxEventCallback+0x98>
		  {
			  TxHeader.DLC = 8;
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001210:	2208      	movs	r2, #8
 8001212:	611a      	str	r2, [r3, #16]
			  TxHeader.StdId = DriveSelectID;
 8001214:	f240 1295 	movw	r2, #405	; 0x195
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 800121a:	601a      	str	r2, [r3, #0]
			  TxHeader.RTR = CAN_RTR_DATA;
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
			  TxData[0] = 4;
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 8001224:	2204      	movs	r2, #4
 8001226:	701a      	strb	r2, [r3, #0]
			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8001228:	4b36      	ldr	r3, [pc, #216]	; (8001304 <HAL_UARTEx_RxEventCallback+0x168>)
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 800122c:	4933      	ldr	r1, [pc, #204]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 800122e:	4836      	ldr	r0, [pc, #216]	; (8001308 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001230:	f000 fea0 	bl	8001f74 <HAL_CAN_AddTxMessage>
		  }

		  if(tempUART_Rx[i] == 'N')
 8001234:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b4e      	cmp	r3, #78	; 0x4e
 800123e:	d112      	bne.n	8001266 <HAL_UARTEx_RxEventCallback+0xca>
		  {
			  TxHeader.DLC = 8;
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001242:	2208      	movs	r2, #8
 8001244:	611a      	str	r2, [r3, #16]
			  TxHeader.StdId = DriveSelectID;
 8001246:	f240 1295 	movw	r2, #405	; 0x195
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 800124c:	601a      	str	r2, [r3, #0]
			  TxHeader.RTR = CAN_RTR_DATA;
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
			  TxData[0] = 2;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_UARTEx_RxEventCallback+0x168>)
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 800125e:	4927      	ldr	r1, [pc, #156]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001260:	4829      	ldr	r0, [pc, #164]	; (8001308 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001262:	f000 fe87 	bl	8001f74 <HAL_CAN_AddTxMessage>
		  }

		  if(tempUART_Rx[i] == 'D')
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b44      	cmp	r3, #68	; 0x44
 8001270:	d112      	bne.n	8001298 <HAL_UARTEx_RxEventCallback+0xfc>
		  {
			  TxHeader.DLC = 8;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001274:	2208      	movs	r2, #8
 8001276:	611a      	str	r2, [r3, #16]
			  TxHeader.StdId = DriveSelectID;
 8001278:	f240 1295 	movw	r2, #405	; 0x195
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 800127e:	601a      	str	r2, [r3, #0]
			  TxHeader.RTR = CAN_RTR_DATA;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
			  TxData[0] = 1;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_UARTEx_RxEventCallback+0x168>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_UARTEx_RxEventCallback+0x164>)
 8001290:	491a      	ldr	r1, [pc, #104]	; (80012fc <HAL_UARTEx_RxEventCallback+0x160>)
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001294:	f000 fe6e 	bl	8001f74 <HAL_CAN_AddTxMessage>
	  for(int i = 0; i < size; i++)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	db94      	blt.n	80011d0 <HAL_UARTEx_RxEventCallback+0x34>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
		HAL_UART_Transmit(&huart3, mainUART_Rx, UART_MAIN_LENGTH,UART_TIMEOUT);
		HAL_UART_Transmit(&huart3, NextionMSG_END, NT_MSG_END_LENGTH,UART_TIMEOUT);

	}
	  }
 80012a6:	e01e      	b.n	80012e6 <HAL_UARTEx_RxEventCallback+0x14a>
	else if(huart == &huart1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_UARTEx_RxEventCallback+0x170>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d11a      	bne.n	80012e6 <HAL_UARTEx_RxEventCallback+0x14a>
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1,mainUART_Rx,UART_MAIN_LENGTH);
 80012b0:	2214      	movs	r2, #20
 80012b2:	4917      	ldr	r1, [pc, #92]	; (8001310 <HAL_UARTEx_RxEventCallback+0x174>)
 80012b4:	4815      	ldr	r0, [pc, #84]	; (800130c <HAL_UARTEx_RxEventCallback+0x170>)
 80012b6:	f004 f847 	bl	8005348 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_UARTEx_RxEventCallback+0x178>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_UARTEx_RxEventCallback+0x178>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0204 	bic.w	r2, r2, #4
 80012c8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, mainUART_Rx, UART_MAIN_LENGTH,UART_TIMEOUT);
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	2214      	movs	r2, #20
 80012d0:	490f      	ldr	r1, [pc, #60]	; (8001310 <HAL_UARTEx_RxEventCallback+0x174>)
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <HAL_UARTEx_RxEventCallback+0x154>)
 80012d4:	f003 fa92 	bl	80047fc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, NextionMSG_END, NT_MSG_END_LENGTH,UART_TIMEOUT);
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	2203      	movs	r2, #3
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_UARTEx_RxEventCallback+0x17c>)
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <HAL_UARTEx_RxEventCallback+0x154>)
 80012e2:	f003 fa8b 	bl	80047fc <HAL_UART_Transmit>
	  }
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000016c 	.word	0x2000016c
 80012f4:	20000288 	.word	0x20000288
 80012f8:	20000234 	.word	0x20000234
 80012fc:	2000008c 	.word	0x2000008c
 8001300:	20000278 	.word	0x20000278
 8001304:	200002a0 	.word	0x200002a0
 8001308:	200000c0 	.word	0x200000c0
 800130c:	200000e8 	.word	0x200000e8
 8001310:	2000028c 	.word	0x2000028c
 8001314:	200001f0 	.word	0x200001f0
 8001318:	08005d78 	.word	0x08005d78

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fbbe 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f854 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f000 f980 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 800132c:	f000 f958 	bl	80015e0 <MX_DMA_Init>
  MX_CAN_Init();
 8001330:	f000 f8a6 	bl	8001480 <MX_CAN_Init>
  MX_USART3_UART_Init();
 8001334:	f000 f924 	bl	8001580 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001338:	f000 f8f2 	bl	8001520 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800133c:	481a      	ldr	r0, [pc, #104]	; (80013a8 <main+0x8c>)
 800133e:	f000 fdd5 	bl	8001eec <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001342:	2102      	movs	r1, #2
 8001344:	4818      	ldr	r0, [pc, #96]	; (80013a8 <main+0x8c>)
 8001346:	f001 f800 	bl	800234a <HAL_CAN_ActivateNotification>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3,tempUART_Rx,UART_TEMP_LENGTH);
 800134a:	2204      	movs	r2, #4
 800134c:	4917      	ldr	r1, [pc, #92]	; (80013ac <main+0x90>)
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <main+0x94>)
 8001350:	f003 fffa 	bl	8005348 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,mainUART_Rx,UART_MAIN_LENGTH);
 8001354:	2214      	movs	r2, #20
 8001356:	4917      	ldr	r1, [pc, #92]	; (80013b4 <main+0x98>)
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <main+0x9c>)
 800135a:	f003 fff5 	bl	8005348 <HAL_UARTEx_ReceiveToIdle_DMA>

  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <main+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <main+0xa0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0204 	bic.w	r2, r2, #4
 800136c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <main+0xa4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <main+0xa4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0204 	bic.w	r2, r2, #4
 800137c:	601a      	str	r2, [r3, #0]


  TxHeader.DLC = 8;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <main+0xa8>)
 8001380:	2208      	movs	r2, #8
 8001382:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = DriveSelectID;
 8001384:	f240 1295 	movw	r2, #405	; 0x195
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <main+0xa8>)
 800138a:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <main+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  TxData[0] = 8;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <main+0xac>)
 8001394:	2208      	movs	r2, #8
 8001396:	701a      	strb	r2, [r3, #0]
  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <main+0xb0>)
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <main+0xac>)
 800139c:	4909      	ldr	r1, [pc, #36]	; (80013c4 <main+0xa8>)
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <main+0x8c>)
 80013a0:	f000 fde8 	bl	8001f74 <HAL_CAN_AddTxMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <main+0x88>
 80013a6:	bf00      	nop
 80013a8:	200000c0 	.word	0x200000c0
 80013ac:	20000288 	.word	0x20000288
 80013b0:	2000016c 	.word	0x2000016c
 80013b4:	2000028c 	.word	0x2000028c
 80013b8:	200000e8 	.word	0x200000e8
 80013bc:	20000234 	.word	0x20000234
 80013c0:	200001f0 	.word	0x200001f0
 80013c4:	2000008c 	.word	0x2000008c
 80013c8:	20000278 	.word	0x20000278
 80013cc:	200002a0 	.word	0x200002a0

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	; 0x58
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013da:	2228      	movs	r2, #40	; 0x28
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 f838 	bl	8005454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001404:	2302      	movs	r3, #2
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140c:	2310      	movs	r3, #16
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001414:	2300      	movs	r3, #0
 8001416:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001418:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fe06 	bl	8003034 <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800142e:	f000 f93b 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fe2e 	bl	80040b0 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800145a:	f000 f925 	bl	80016a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f003 f853 	bl	8004514 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001474:	f000 f918 	bl	80016a8 <Error_Handler>
  }
}
 8001478:	bf00      	nop
 800147a:	3758      	adds	r7, #88	; 0x58
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <MX_CAN_Init+0x98>)
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <MX_CAN_Init+0x9c>)
 800148a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_CAN_Init+0x98>)
 800148e:	2208      	movs	r2, #8
 8001490:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_CAN_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_CAN_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_CAN_Init+0x98>)
 80014a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_CAN_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_CAN_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_CAN_Init+0x98>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_CAN_Init+0x98>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_CAN_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_CAN_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_CAN_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <MX_CAN_Init+0x98>)
 80014d2:	f000 fb47 	bl	8001b64 <HAL_CAN_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80014dc:	f000 f8e4 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

     canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
     canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 80014e4:	230a      	movs	r3, #10
 80014e6:	617b      	str	r3, [r7, #20]
     canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
     canfilterconfig.FilterIdHigh = 0x0000;
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
     canfilterconfig.FilterIdLow = 0x0000;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
     canfilterconfig.FilterMaskIdHigh = 0x0000;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
     canfilterconfig.FilterMaskIdLow = 0x0000;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
     canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
     canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
     // canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1

     HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <MX_CAN_Init+0x98>)
 800150a:	f000 fc26 	bl	8001d5a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000c0 	.word	0x200000c0
 800151c:	40006400 	.word	0x40006400

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <MX_USART1_UART_Init+0x5c>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800152c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001564:	f003 f8fc 	bl	8004760 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800156e:	f000 f89b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000e8 	.word	0x200000e8
 800157c:	40013800 	.word	0x40013800

08001580 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <MX_USART3_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART3_UART_Init+0x58>)
 80015c4:	f003 f8cc 	bl	8004760 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 f86b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000016c 	.word	0x2000016c
 80015dc:	40004800 	.word	0x40004800

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_DMA_Init+0x48>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <MX_DMA_Init+0x48>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_DMA_Init+0x48>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200d      	movs	r0, #13
 8001604:	f001 f9c1 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001608:	200d      	movs	r0, #13
 800160a:	f001 f9da 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	200f      	movs	r0, #15
 8001614:	f001 f9b9 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001618:	200f      	movs	r0, #15
 800161a:	f001 f9d2 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_GPIO_Init+0x78>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <MX_GPIO_Init+0x78>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_GPIO_Init+0x78>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_GPIO_Init+0x78>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <MX_GPIO_Init+0x78>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_GPIO_Init+0x78>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2102      	movs	r1, #2
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f001 fcc3 	bl	8003004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 800167e:	2302      	movs	r3, #2
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f001 fb42 	bl	8002d20 <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_MspInit+0x40>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_MspInit+0x40>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_MspInit+0x40>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_MspInit+0x40>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_MspInit+0x40>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_MspInit+0x40>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_CAN_MspInit+0x9c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d138      	bne.n	800178c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_CAN_MspInit+0xa0>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_CAN_MspInit+0xa0>)
 8001720:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_CAN_MspInit+0xa0>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_CAN_MspInit+0xa0>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_CAN_MspInit+0xa0>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6153      	str	r3, [r2, #20]
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_CAN_MspInit+0xa0>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800175c:	2309      	movs	r3, #9
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <HAL_CAN_MspInit+0xa4>)
 8001768:	f001 fada 	bl	8002d20 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2014      	movs	r0, #20
 8001772:	f001 f90a 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001776:	2014      	movs	r0, #20
 8001778:	f001 f923 	bl	80029c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2015      	movs	r0, #21
 8001782:	f001 f902 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001786:	2015      	movs	r0, #21
 8001788:	f001 f91b 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40006400 	.word	0x40006400
 8001798:	40021000 	.word	0x40021000
 800179c:	48000400 	.word	0x48000400

080017a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_UART_MspInit+0x174>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d150      	bne.n	8001864 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c2:	4b55      	ldr	r3, [pc, #340]	; (8001918 <HAL_UART_MspInit+0x178>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a54      	ldr	r2, [pc, #336]	; (8001918 <HAL_UART_MspInit+0x178>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6193      	str	r3, [r2, #24]
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <HAL_UART_MspInit+0x178>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b4f      	ldr	r3, [pc, #316]	; (8001918 <HAL_UART_MspInit+0x178>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_UART_MspInit+0x178>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6153      	str	r3, [r2, #20]
 80017e6:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_UART_MspInit+0x178>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001804:	2307      	movs	r3, #7
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f001 fa85 	bl	8002d20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_UART_MspInit+0x17c>)
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_UART_MspInit+0x180>)
 800181a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181c:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_UART_MspInit+0x17c>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_UART_MspInit+0x17c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <HAL_UART_MspInit+0x17c>)
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_UART_MspInit+0x17c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001834:	4b39      	ldr	r3, [pc, #228]	; (800191c <HAL_UART_MspInit+0x17c>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_UART_MspInit+0x17c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_UART_MspInit+0x17c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001846:	4835      	ldr	r0, [pc, #212]	; (800191c <HAL_UART_MspInit+0x17c>)
 8001848:	f001 f8d5 	bl	80029f6 <HAL_DMA_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001852:	f7ff ff29 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a30      	ldr	r2, [pc, #192]	; (800191c <HAL_UART_MspInit+0x17c>)
 800185a:	671a      	str	r2, [r3, #112]	; 0x70
 800185c:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_UART_MspInit+0x17c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001862:	e053      	b.n	800190c <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2e      	ldr	r2, [pc, #184]	; (8001924 <HAL_UART_MspInit+0x184>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d14e      	bne.n	800190c <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_UART_MspInit+0x178>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_UART_MspInit+0x178>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_UART_MspInit+0x178>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_UART_MspInit+0x178>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4a23      	ldr	r2, [pc, #140]	; (8001918 <HAL_UART_MspInit+0x178>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	6153      	str	r3, [r2, #20]
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_UART_MspInit+0x178>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800189e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b0:	2307      	movs	r3, #7
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	481b      	ldr	r0, [pc, #108]	; (8001928 <HAL_UART_MspInit+0x188>)
 80018bc:	f001 fa30 	bl	8002d20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_UART_MspInit+0x190>)
 80018c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80018f0:	480e      	ldr	r0, [pc, #56]	; (800192c <HAL_UART_MspInit+0x18c>)
 80018f2:	f001 f880 	bl	80029f6 <HAL_DMA_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_UART_MspInit+0x160>
      Error_Handler();
 80018fc:	f7ff fed4 	bl	80016a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_UART_MspInit+0x18c>)
 8001904:	671a      	str	r2, [r3, #112]	; 0x70
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_UART_MspInit+0x18c>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40013800 	.word	0x40013800
 8001918:	40021000 	.word	0x40021000
 800191c:	200001f0 	.word	0x200001f0
 8001920:	40020058 	.word	0x40020058
 8001924:	40004800 	.word	0x40004800
 8001928:	48000400 	.word	0x48000400
 800192c:	20000234 	.word	0x20000234
 8001930:	40020030 	.word	0x40020030

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197a:	f000 f8d7 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Channel3_IRQHandler+0x10>)
 800198a:	f001 f8da 	bl	8002b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000234 	.word	0x20000234

08001998 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA1_Channel5_IRQHandler+0x10>)
 800199e:	f001 f8d0 	bl	8002b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200001f0 	.word	0x200001f0

080019ac <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <CAN_RX0_IRQHandler+0x10>)
 80019b2:	f000 fcef 	bl	8002394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000c0 	.word	0x200000c0

080019c0 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <CAN_RX1_IRQHandler+0x10>)
 80019c6:	f000 fce5 	bl	8002394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000c0 	.word	0x200000c0

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f003 fcfc 	bl	8005400 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20003000 	.word	0x20003000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	200002a4 	.word	0x200002a4
 8001a3c:	200002c0 	.word	0x200002c0

08001a40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0b      	ldr	r4, [pc, #44]	; (8001a98 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a76:	f7ff ffe3 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f003 fcc7 	bl	800540c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7e:	f7ff fc4d 	bl	800131c <main>

08001a82 <LoopForever>:

LoopForever:
    b LoopForever
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a84:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a90:	08005e18 	.word	0x08005e18
  ldr r2, =_sbss
 8001a94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a98:	200002bc 	.word	0x200002bc

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_Init+0x28>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_Init+0x28>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 ff5f 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	200f      	movs	r0, #15
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fdfa 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 ff77 	bl	80029de <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 ff3f 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_IncTick+0x20>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <HAL_IncTick+0x20>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	200002a8 	.word	0x200002a8

08001b50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b54:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <HAL_GetTick+0x10>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	200002a8 	.word	0x200002a8

08001b64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0ed      	b.n	8001d52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fdb8 	bl	80016f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b98:	f7ff ffda 	bl	8001b50 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b9e:	e012      	b.n	8001bc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ba0:	f7ff ffd6 	bl	8001b50 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b0a      	cmp	r3, #10
 8001bac:	d90b      	bls.n	8001bc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0c5      	b.n	8001d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0e5      	beq.n	8001ba0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0202 	bic.w	r2, r2, #2
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be4:	f7ff ffb4 	bl	8001b50 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bea:	e012      	b.n	8001c12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bec:	f7ff ffb0 	bl	8001b50 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d90b      	bls.n	8001c12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09f      	b.n	8001d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e5      	bne.n	8001bec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e1b      	ldrb	r3, [r3, #24]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e007      	b.n	8001c4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7e5b      	ldrb	r3, [r3, #25]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e9b      	ldrb	r3, [r3, #26]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0220 	orr.w	r2, r2, #32
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e007      	b.n	8001c9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0220 	bic.w	r2, r2, #32
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7edb      	ldrb	r3, [r3, #27]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0210 	bic.w	r2, r2, #16
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e007      	b.n	8001cc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0210 	orr.w	r2, r2, #16
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7f1b      	ldrb	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0208 	orr.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e007      	b.n	8001cf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0208 	bic.w	r2, r2, #8
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7f5b      	ldrb	r3, [r3, #29]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d108      	bne.n	8001d0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0204 	orr.w	r2, r2, #4
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e007      	b.n	8001d1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0204 	bic.w	r2, r2, #4
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	ea42 0103 	orr.w	r1, r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d003      	beq.n	8001d80 <HAL_CAN_ConfigFilter+0x26>
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f040 80aa 	bne.w	8001ed4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2201      	movs	r2, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d123      	bne.n	8001e02 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ddc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3248      	adds	r2, #72	; 0x48
 8001de2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001df6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	3348      	adds	r3, #72	; 0x48
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d122      	bne.n	8001e50 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3248      	adds	r2, #72	; 0x48
 8001e30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e46:	6979      	ldr	r1, [r7, #20]
 8001e48:	3348      	adds	r3, #72	; 0x48
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e96:	e007      	b.n	8001ea8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e006      	b.n	8001ee2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d12e      	bne.n	8001f5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f18:	f7ff fe1a 	bl	8001b50 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f1e:	e012      	b.n	8001f46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f20:	f7ff fe16 	bl	8001b50 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d90b      	bls.n	8001f46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e012      	b.n	8001f6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e5      	bne.n	8001f20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e006      	b.n	8001f6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
  }
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d003      	beq.n	8001fa0 <HAL_CAN_AddTxMessage+0x2c>
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	f040 80b8 	bne.w	8002110 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a0 	beq.w	8002100 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	0e1b      	lsrs	r3, r3, #24
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d907      	bls.n	8001fe0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e09e      	b.n	800211e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	6809      	ldr	r1, [r1, #0]
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3318      	adds	r3, #24
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	440b      	add	r3, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e00f      	b.n	800202e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002018:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002022:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3318      	adds	r3, #24
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	440b      	add	r3, r1
 800202c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3318      	adds	r3, #24
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	440b      	add	r3, r1
 800203e:	3304      	adds	r3, #4
 8002040:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	7d1b      	ldrb	r3, [r3, #20]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d111      	bne.n	800206e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3318      	adds	r3, #24
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	6811      	ldr	r1, [r2, #0]
 800205e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3318      	adds	r3, #24
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	440b      	add	r3, r1
 800206a:	3304      	adds	r3, #4
 800206c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3307      	adds	r3, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	061a      	lsls	r2, r3, #24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3306      	adds	r3, #6
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3305      	adds	r3, #5
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	4313      	orrs	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	3204      	adds	r2, #4
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	4610      	mov	r0, r2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	6811      	ldr	r1, [r2, #0]
 8002096:	ea43 0200 	orr.w	r2, r3, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	440b      	add	r3, r1
 80020a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3303      	adds	r3, #3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	061a      	lsls	r2, r3, #24
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3302      	adds	r3, #2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	4313      	orrs	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	4610      	mov	r0, r2
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	6811      	ldr	r1, [r2, #0]
 80020cc:	ea43 0200 	orr.w	r2, r3, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3318      	adds	r3, #24
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6811      	ldr	r1, [r2, #0]
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3318      	adds	r3, #24
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	440b      	add	r3, r1
 80020fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e00e      	b.n	800211e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e006      	b.n	800211e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d003      	beq.n	800214c <HAL_CAN_GetRxMessage+0x24>
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b02      	cmp	r3, #2
 8002148:	f040 80f3 	bne.w	8002332 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10e      	bne.n	8002170 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d116      	bne.n	800218e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0e7      	b.n	8002340 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0d8      	b.n	8002340 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	331b      	adds	r3, #27
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0204 	and.w	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10c      	bne.n	80021c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	331b      	adds	r3, #27
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	4413      	add	r3, r2
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0d5b      	lsrs	r3, r3, #21
 80021bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e00b      	b.n	80021de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	331b      	adds	r3, #27
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	331b      	adds	r3, #27
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4413      	add	r3, r2
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0202 	and.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	331b      	adds	r3, #27
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	331b      	adds	r3, #27
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	b2da      	uxtb	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	331b      	adds	r3, #27
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	4413      	add	r3, r2
 8002230:	3304      	adds	r3, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4413      	add	r3, r2
 800225c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0a1a      	lsrs	r2, r3, #8
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0c1a      	lsrs	r2, r3, #16
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	3302      	adds	r3, #2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4413      	add	r3, r2
 8002290:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e1a      	lsrs	r2, r3, #24
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	3303      	adds	r3, #3
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3304      	adds	r3, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0a1a      	lsrs	r2, r3, #8
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3305      	adds	r3, #5
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0c1a      	lsrs	r2, r3, #16
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3306      	adds	r3, #6
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e1a      	lsrs	r2, r3, #24
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3307      	adds	r3, #7
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	e007      	b.n	800232e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0220 	orr.w	r2, r2, #32
 800232c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e006      	b.n	8002340 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d002      	beq.n	8002368 <HAL_CAN_ActivateNotification+0x1e>
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d109      	bne.n	800237c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6959      	ldr	r1, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e006      	b.n	800238a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d07c      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f983 	bl	8002702 <HAL_CAN_TxMailbox0CompleteCallback>
 80023fc:	e016      	b.n	800242c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	e00c      	b.n	800242c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
 8002424:	e002      	b.n	800242c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f986 	bl	8002738 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d024      	beq.n	8002480 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f962 	bl	8002714 <HAL_CAN_TxMailbox1CompleteCallback>
 8002450:	e016      	b.n	8002480 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	e00c      	b.n	8002480 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	e002      	b.n	8002480 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f965 	bl	800274a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d024      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002492:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f941 	bl	8002726 <HAL_CAN_TxMailbox2CompleteCallback>
 80024a4:	e016      	b.n	80024d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	e00c      	b.n	80024d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	e002      	b.n	80024d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f944 	bl	800275c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2208      	movs	r2, #8
 8002512:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f92a 	bl	800276e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fc8c 	bl	8000e50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002552:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2210      	movs	r2, #16
 800255a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f90a 	bl	8002792 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8f2 	bl	8002780 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2210      	movs	r2, #16
 80025b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8f3 	bl	80027a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2208      	movs	r2, #8
 80025d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8eb 	bl	80027b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d07b      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d072      	beq.n	80026da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	2b00      	cmp	r3, #0
 8002650:	d043      	beq.n	80026da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03e      	beq.n	80026da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002662:	2b60      	cmp	r3, #96	; 0x60
 8002664:	d02b      	beq.n	80026be <HAL_CAN_IRQHandler+0x32a>
 8002666:	2b60      	cmp	r3, #96	; 0x60
 8002668:	d82e      	bhi.n	80026c8 <HAL_CAN_IRQHandler+0x334>
 800266a:	2b50      	cmp	r3, #80	; 0x50
 800266c:	d022      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x320>
 800266e:	2b50      	cmp	r3, #80	; 0x50
 8002670:	d82a      	bhi.n	80026c8 <HAL_CAN_IRQHandler+0x334>
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d019      	beq.n	80026aa <HAL_CAN_IRQHandler+0x316>
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d826      	bhi.n	80026c8 <HAL_CAN_IRQHandler+0x334>
 800267a:	2b30      	cmp	r3, #48	; 0x30
 800267c:	d010      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x30c>
 800267e:	2b30      	cmp	r3, #48	; 0x30
 8002680:	d822      	bhi.n	80026c8 <HAL_CAN_IRQHandler+0x334>
 8002682:	2b10      	cmp	r3, #16
 8002684:	d002      	beq.n	800268c <HAL_CAN_IRQHandler+0x2f8>
 8002686:	2b20      	cmp	r3, #32
 8002688:	d005      	beq.n	8002696 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800268a:	e01d      	b.n	80026c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002694:	e019      	b.n	80026ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f043 0310 	orr.w	r3, r3, #16
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800269e:	e014      	b.n	80026ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	f043 0320 	orr.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026a8:	e00f      	b.n	80026ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b2:	e00a      	b.n	80026ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026bc:	e005      	b.n	80026ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026c6:	e000      	b.n	80026ca <HAL_CAN_IRQHandler+0x336>
            break;
 80026c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2204      	movs	r2, #4
 80026e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f867 	bl	80027c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026fa:	bf00      	nop
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <__NVIC_EnableIRQ+0x34>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
         );
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff90 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff2d 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff42 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff90 	bl	80028cc <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5f 	bl	8002878 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff35 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e037      	b.n	8002a7c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f940 	bl	8002ce4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}  
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Start_IT+0x20>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e04a      	b.n	8002b3a <HAL_DMA_Start_IT+0xb6>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d13a      	bne.n	8002b2c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f8d4 	bl	8002c88 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 020e 	orr.w	r2, r2, #14
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 020a 	orr.w	r2, r2, #10
 8002b08:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0204 	bic.w	r2, r2, #4
 8002b18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e005      	b.n	8002b38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
 8002b36:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2204      	movs	r2, #4
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d024      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x72>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01f      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d06a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bb2:	e065      	b.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2202      	movs	r2, #2
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02c      	beq.n	8002c1e <HAL_DMA_IRQHandler+0xdc>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 020a 	bic.w	r2, r2, #10
 8002bea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d035      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c1c:	e030      	b.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2208      	movs	r2, #8
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    }
  }
}  
 8002c7e:	e7ff      	b.n	8002c80 <HAL_DMA_IRQHandler+0x13e>
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d108      	bne.n	8002cc8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc6:	e007      	b.n	8002cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <DMA_CalcBaseAndBitshift+0x30>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <DMA_CalcBaseAndBitshift+0x34>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	009a      	lsls	r2, r3, #2
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <DMA_CalcBaseAndBitshift+0x38>)
 8002d08:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	bffdfff8 	.word	0xbffdfff8
 8002d18:	cccccccd 	.word	0xcccccccd
 8002d1c:	40020000 	.word	0x40020000

08002d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e14e      	b.n	8002fce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8140 	beq.w	8002fc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d005      	beq.n	8002d60 <HAL_GPIO_Init+0x40>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d130      	bne.n	8002dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d96:	2201      	movs	r2, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0201 	and.w	r2, r3, #1
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d017      	beq.n	8002dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d123      	bne.n	8002e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	6939      	ldr	r1, [r7, #16]
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0203 	and.w	r2, r3, #3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 809a 	beq.w	8002fc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <HAL_GPIO_Init+0x2cc>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4a54      	ldr	r2, [pc, #336]	; (8002fec <HAL_GPIO_Init+0x2cc>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6193      	str	r3, [r2, #24]
 8002ea0:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_GPIO_Init+0x2cc>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eac:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <HAL_GPIO_Init+0x2d0>)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed6:	d013      	beq.n	8002f00 <HAL_GPIO_Init+0x1e0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <HAL_GPIO_Init+0x2d4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00d      	beq.n	8002efc <HAL_GPIO_Init+0x1dc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a45      	ldr	r2, [pc, #276]	; (8002ff8 <HAL_GPIO_Init+0x2d8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x1d8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a44      	ldr	r2, [pc, #272]	; (8002ffc <HAL_GPIO_Init+0x2dc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_GPIO_Init+0x1d4>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e006      	b.n	8002f02 <HAL_GPIO_Init+0x1e2>
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	e004      	b.n	8002f02 <HAL_GPIO_Init+0x1e2>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0x1e2>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_GPIO_Init+0x1e2>
 8002f00:	2300      	movs	r3, #0
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	f002 0203 	and.w	r2, r2, #3
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	4093      	lsls	r3, r2
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f12:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_GPIO_Init+0x2d0>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f44:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f6e:	4a24      	ldr	r2, [pc, #144]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fc2:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <HAL_GPIO_Init+0x2e0>)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f aea9 	bne.w	8002d30 <HAL_GPIO_Init+0x10>
  }
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	48000400 	.word	0x48000400
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	48000c00 	.word	0x48000c00
 8003000:	40010400 	.word	0x40010400

08003004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	807b      	strh	r3, [r7, #2]
 8003010:	4613      	mov	r3, r2
 8003012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003014:	787b      	ldrb	r3, [r7, #1]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003020:	e002      	b.n	8003028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
	...

08003034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800303a:	af00      	add	r7, sp, #0
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003044:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f001 b823 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 817d 	beq.w	800336a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003070:	4bbc      	ldr	r3, [pc, #752]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d00c      	beq.n	8003096 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800307c:	4bb9      	ldr	r3, [pc, #740]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d15c      	bne.n	8003142 <HAL_RCC_OscConfig+0x10e>
 8003088:	4bb6      	ldr	r3, [pc, #728]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d155      	bne.n	8003142 <HAL_RCC_OscConfig+0x10e>
 8003096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_OscConfig+0x94>
 80030c2:	4ba8      	ldr	r3, [pc, #672]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e015      	b.n	80030f4 <HAL_RCC_OscConfig+0xc0>
 80030c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80030f0:	4b9c      	ldr	r3, [pc, #624]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80030fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003100:	fa92 f2a2 	rbit	r2, r2
 8003104:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003108:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800310c:	fab2 f282 	clz	r2, r2
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	f042 0220 	orr.w	r2, r2, #32
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f002 021f 	and.w	r2, r2, #31
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f202 	lsl.w	r2, r1, r2
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 811f 	beq.w	8003368 <HAL_RCC_OscConfig+0x334>
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 8116 	bne.w	8003368 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f000 bfaf 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x12e>
 8003154:	4b83      	ldr	r3, [pc, #524]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a82      	ldr	r2, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e036      	b.n	80031d0 <HAL_RCC_OscConfig+0x19c>
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x158>
 8003172:	4b7c      	ldr	r3, [pc, #496]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7b      	ldr	r2, [pc, #492]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a78      	ldr	r2, [pc, #480]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e021      	b.n	80031d0 <HAL_RCC_OscConfig+0x19c>
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x184>
 800319e:	4b71      	ldr	r3, [pc, #452]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a70      	ldr	r2, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6d      	ldr	r2, [pc, #436]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x19c>
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a66      	ldr	r2, [pc, #408]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d0:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f023 020f 	bic.w	r2, r3, #15
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	495f      	ldr	r1, [pc, #380]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d059      	beq.n	80032ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fca9 	bl	8001b50 <HAL_GetTick>
 80031fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fca4 	bl	8001b50 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d902      	bls.n	800321a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	f000 bf43 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 800321a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800322e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_RCC_OscConfig+0x218>
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	e015      	b.n	8003278 <HAL_RCC_OscConfig+0x244>
 800324c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003250:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003264:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003268:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800327c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003280:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003284:	fa92 f2a2 	rbit	r2, r2
 8003288:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800328c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f002 021f 	and.w	r2, r2, #31
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ab      	beq.n	8003204 <HAL_RCC_OscConfig+0x1d0>
 80032ac:	e05d      	b.n	800336a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe fc4f 	bl	8001b50 <HAL_GetTick>
 80032b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe fc4a 	bl	8001b50 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d902      	bls.n	80032ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	f000 bee9 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80032ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80032e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_OscConfig+0x2cc>
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e015      	b.n	800332c <HAL_RCC_OscConfig+0x2f8>
 8003300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003304:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003318:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800331c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003330:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003334:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003338:	fa92 f2a2 	rbit	r2, r2
 800333c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003340:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003344:	fab2 f282 	clz	r2, r2
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	f042 0220 	orr.w	r2, r2, #32
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f002 021f 	and.w	r2, r2, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ab      	bne.n	80032b8 <HAL_RCC_OscConfig+0x284>
 8003360:	e003      	b.n	800336a <HAL_RCC_OscConfig+0x336>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 817d 	beq.w	800367a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003380:	4ba6      	ldr	r3, [pc, #664]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800338c:	4ba3      	ldr	r3, [pc, #652]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d172      	bne.n	800347e <HAL_RCC_OscConfig+0x44a>
 8003398:	4ba0      	ldr	r3, [pc, #640]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d16c      	bne.n	800347e <HAL_RCC_OscConfig+0x44a>
 80033a4:	2302      	movs	r3, #2
 80033a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80033b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d102      	bne.n	80033d4 <HAL_RCC_OscConfig+0x3a0>
 80033ce:	4b93      	ldr	r3, [pc, #588]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
 80033d4:	2302      	movs	r3, #2
 80033d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033e6:	2302      	movs	r3, #2
 80033e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80033f8:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2202      	movs	r2, #2
 80033fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003402:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003406:	fa92 f2a2 	rbit	r2, r2
 800340a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800340e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003412:	fab2 f282 	clz	r2, r2
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f002 021f 	and.w	r2, r2, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCC_OscConfig+0x410>
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d002      	beq.n	8003444 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f000 be2e 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	21f8      	movs	r1, #248	; 0xf8
 800345a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003462:	fa91 f1a1 	rbit	r1, r1
 8003466:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800346a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800346e:	fab1 f181 	clz	r1, r1
 8003472:	b2c9      	uxtb	r1, r1
 8003474:	408b      	lsls	r3, r1
 8003476:	4969      	ldr	r1, [pc, #420]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347c:	e0fd      	b.n	800367a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8088 	beq.w	80035a0 <HAL_RCC_OscConfig+0x56c>
 8003490:	2301      	movs	r3, #1
 8003492:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80034a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fb48 	bl	8001b50 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fb43 	bl	8001b50 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d902      	bls.n	80034dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	f000 bde2 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80034dc:	2302      	movs	r3, #2
 80034de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80034ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_RCC_OscConfig+0x4d8>
 8003506:	4b45      	ldr	r3, [pc, #276]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e013      	b.n	8003534 <HAL_RCC_OscConfig+0x500>
 800350c:	2302      	movs	r3, #2
 800350e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003524:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2202      	movs	r2, #2
 8003536:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800353a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800353e:	fa92 f2a2 	rbit	r2, r2
 8003542:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003546:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800354a:	fab2 f282 	clz	r2, r2
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f042 0220 	orr.w	r2, r2, #32
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f002 021f 	and.w	r2, r2, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f202 	lsl.w	r2, r1, r2
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0af      	beq.n	80034c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	21f8      	movs	r1, #248	; 0xf8
 800357c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003584:	fa91 f1a1 	rbit	r1, r1
 8003588:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800358c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003590:	fab1 f181 	clz	r1, r1
 8003594:	b2c9      	uxtb	r1, r1
 8003596:	408b      	lsls	r3, r1
 8003598:	4920      	ldr	r1, [pc, #128]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
 800359e:	e06c      	b.n	800367a <HAL_RCC_OscConfig+0x646>
 80035a0:	2301      	movs	r3, #1
 80035a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80035b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	461a      	mov	r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fac0 	bl	8001b50 <HAL_GetTick>
 80035d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe fabb 	bl	8001b50 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	f000 bd5a 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80035fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <HAL_RCC_OscConfig+0x5ec>
 8003616:	4b01      	ldr	r3, [pc, #4]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e015      	b.n	8003648 <HAL_RCC_OscConfig+0x614>
 800361c:	40021000 	.word	0x40021000
 8003620:	2302      	movs	r3, #2
 8003622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003632:	2302      	movs	r3, #2
 8003634:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003638:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003644:	4bc8      	ldr	r3, [pc, #800]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800364e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003652:	fa92 f2a2 	rbit	r2, r2
 8003656:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800365a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800365e:	fab2 f282 	clz	r2, r2
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f042 0220 	orr.w	r2, r2, #32
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f002 021f 	and.w	r2, r2, #31
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f202 	lsl.w	r2, r1, r2
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ad      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8110 	beq.w	80038b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d079      	beq.n	8003794 <HAL_RCC_OscConfig+0x760>
 80036a0:	2301      	movs	r3, #1
 80036a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	4bab      	ldr	r3, [pc, #684]	; (800396c <HAL_RCC_OscConfig+0x938>)
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	461a      	mov	r2, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fa41 	bl	8001b50 <HAL_GetTick>
 80036ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe fa3c 	bl	8001b50 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d902      	bls.n	80036ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f000 bcdb 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80036ea:	2302      	movs	r3, #2
 80036ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003704:	2202      	movs	r2, #2
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003728:	2202      	movs	r2, #2
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003742:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 8003746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003750:	2102      	movs	r1, #2
 8003752:	6019      	str	r1, [r3, #0]
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f1a3 	rbit	r1, r3
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800376a:	6019      	str	r1, [r3, #0]
  return result;
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0a0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x6a0>
 8003792:	e08d      	b.n	80038b0 <HAL_RCC_OscConfig+0x87c>
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x938>)
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fe f9bb 	bl	8001b50 <HAL_GetTick>
 80037da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe f9b6 	bl	8001b50 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d902      	bls.n	80037f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	f000 bc55 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037fe:	2202      	movs	r2, #2
 8003800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003822:	2202      	movs	r2, #2
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003846:	2202      	movs	r2, #2
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003860:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 8003864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800386e:	2102      	movs	r1, #2
 8003870:	6019      	str	r1, [r3, #0]
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f1a3 	rbit	r1, r3
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003888:	6019      	str	r1, [r3, #0]
  return result;
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d197      	bne.n	80037e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 81a1 	beq.w	8003c08 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	61d3      	str	r3, [r2, #28]
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11a      	bne.n	8003948 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe f917 	bl	8001b50 <HAL_GetTick>
 8003922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	e009      	b.n	800393c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe f912 	bl	8001b50 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e3b1      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ef      	beq.n	8003928 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10d      	bne.n	8003974 <HAL_RCC_OscConfig+0x940>
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a02      	ldr	r2, [pc, #8]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	e03c      	b.n	80039e0 <HAL_RCC_OscConfig+0x9ac>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	10908120 	.word	0x10908120
 8003970:	40007000 	.word	0x40007000
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10c      	bne.n	800399e <HAL_RCC_OscConfig+0x96a>
 8003984:	4bc1      	ldr	r3, [pc, #772]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4ac0      	ldr	r2, [pc, #768]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	4bbe      	ldr	r3, [pc, #760]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4abd      	ldr	r2, [pc, #756]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003996:	f023 0304 	bic.w	r3, r3, #4
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e020      	b.n	80039e0 <HAL_RCC_OscConfig+0x9ac>
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x994>
 80039ae:	4bb7      	ldr	r3, [pc, #732]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4ab6      	ldr	r2, [pc, #728]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	6213      	str	r3, [r2, #32]
 80039ba:	4bb4      	ldr	r3, [pc, #720]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4ab3      	ldr	r2, [pc, #716]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x9ac>
 80039c8:	4bb0      	ldr	r3, [pc, #704]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4aaf      	ldr	r2, [pc, #700]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	4bad      	ldr	r3, [pc, #692]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4aac      	ldr	r2, [pc, #688]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8081 	beq.w	8003af4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fe f8ad 	bl	8001b50 <HAL_GetTick>
 80039f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe f8a8 	bl	8001b50 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e345      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_OscConfig+0xa4c>
 8003a7a:	4b84      	ldr	r3, [pc, #528]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	e013      	b.n	8003aa8 <HAL_RCC_OscConfig+0xa74>
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a88:	2202      	movs	r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	6011      	str	r1, [r2, #0]
 8003ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	fa92 f1a2 	rbit	r1, r2
 8003ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003aca:	6011      	str	r1, [r2, #0]
  return result;
 8003acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	fab2 f282 	clz	r2, r2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f002 021f 	and.w	r2, r2, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d084      	beq.n	80039fc <HAL_RCC_OscConfig+0x9c8>
 8003af2:	e07f      	b.n	8003bf4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af4:	f7fe f82c 	bl	8001b50 <HAL_GetTick>
 8003af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	e00b      	b.n	8003b16 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe f827 	bl	8001b50 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e2c4      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b1e:	2202      	movs	r2, #2
 8003b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	fa93 f2a3 	rbit	r2, r3
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b42:	2202      	movs	r2, #2
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	fa93 f2a3 	rbit	r2, r3
 8003b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b5c:	601a      	str	r2, [r3, #0]
  return result;
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_OscConfig+0xb4e>
 8003b7c:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	e013      	b.n	8003baa <HAL_RCC_OscConfig+0xb76>
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	fa93 f2a3 	rbit	r2, r3
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	6011      	str	r1, [r2, #0]
 8003bb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	fa92 f1a2 	rbit	r1, r2
 8003bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bcc:	6011      	str	r1, [r2, #0]
  return result;
 8003bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d184      	bne.n	8003afe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8242 	beq.w	800409e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	f000 8213 	beq.w	800404e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f040 8162 	bne.w	8003efe <HAL_RCC_OscConfig+0xeca>
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c5e:	601a      	str	r2, [r3, #0]
  return result;
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd ff66 	bl	8001b50 <HAL_GetTick>
 8003c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCC_OscConfig+0xc70>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd ff5e 	bl	8001b50 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e1fd      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cc8:	601a      	str	r2, [r3, #0]
  return result;
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_OscConfig+0xcba>
 8003ce8:	4bb0      	ldr	r3, [pc, #704]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	e027      	b.n	8003d3e <HAL_RCC_OscConfig+0xd0a>
 8003cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	fa93 f2a3 	rbit	r2, r3
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fa93 f2a3 	rbit	r2, r3
 8003d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	4b9c      	ldr	r3, [pc, #624]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d42:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d4a:	6011      	str	r1, [r2, #0]
 8003d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d50:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	fa92 f1a2 	rbit	r1, r2
 8003d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d62:	6011      	str	r1, [r2, #0]
  return result;
 8003d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d182      	bne.n	8003c90 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8a:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	430b      	orrs	r3, r1
 8003dac:	497f      	ldr	r1, [pc, #508]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	fa93 f2a3 	rbit	r2, r3
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dd6:	601a      	str	r2, [r3, #0]
  return result;
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003de0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	461a      	mov	r2, r3
 8003df4:	2301      	movs	r3, #1
 8003df6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd feaa 	bl	8001b50 <HAL_GetTick>
 8003dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	e009      	b.n	8003e16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd fea5 	bl	8001b50 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e144      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e3a:	601a      	str	r2, [r3, #0]
  return result;
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0xe2c>
 8003e5a:	4b54      	ldr	r3, [pc, #336]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e027      	b.n	8003eb0 <HAL_RCC_OscConfig+0xe7c>
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	fa93 f2a3 	rbit	r2, r3
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003eb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ebc:	6011      	str	r1, [r2, #0]
 8003ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ec2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	fa92 f1a2 	rbit	r1, r2
 8003ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ed4:	6011      	str	r1, [r2, #0]
  return result;
 8003ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	fab2 f282 	clz	r2, r2
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	f002 021f 	and.w	r2, r2, #31
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d082      	beq.n	8003e02 <HAL_RCC_OscConfig+0xdce>
 8003efc:	e0cf      	b.n	800409e <HAL_RCC_OscConfig+0x106a>
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2300      	movs	r3, #0
 8003f42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd fe04 	bl	8001b50 <HAL_GetTick>
 8003f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4c:	e009      	b.n	8003f62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fdff 	bl	8001b50 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e09e      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f86:	601a      	str	r2, [r3, #0]
  return result;
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d104      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xf7c>
 8003fa6:	4b01      	ldr	r3, [pc, #4]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	e029      	b.n	8004000 <HAL_RCC_OscConfig+0xfcc>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	fa93 f2a3 	rbit	r2, r3
 8003fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	fa93 f2a3 	rbit	r2, r3
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <HAL_RCC_OscConfig+0x1078>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004004:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004008:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004012:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	fa92 f1a2 	rbit	r1, r2
 800401c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004020:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004024:	6011      	str	r1, [r2, #0]
  return result;
 8004026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	fab2 f282 	clz	r2, r2
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f042 0220 	orr.w	r2, r2, #32
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f002 021f 	and.w	r2, r2, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d180      	bne.n	8003f4e <HAL_RCC_OscConfig+0xf1a>
 800404c:	e027      	b.n	800409e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e01e      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_RCC_OscConfig+0x1078>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800406a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800406e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	429a      	cmp	r2, r3
 8004080:	d10b      	bne.n	800409a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004082:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004096:	429a      	cmp	r2, r3
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09e      	sub	sp, #120	; 0x78
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e162      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b90      	ldr	r3, [pc, #576]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b8d      	ldr	r3, [pc, #564]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	498b      	ldr	r1, [pc, #556]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b89      	ldr	r3, [pc, #548]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e14a      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	497f      	ldr	r1, [pc, #508]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80dc 	beq.w	80042dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d13c      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xf6>
 800412c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004130:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <HAL_RCC_ClockConfig+0xa6>
 8004150:	4b6f      	ldr	r3, [pc, #444]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	e00f      	b.n	8004176 <HAL_RCC_ClockConfig+0xc6>
 8004156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800415a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	667b      	str	r3, [r7, #100]	; 0x64
 8004164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004168:	663b      	str	r3, [r7, #96]	; 0x60
 800416a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004172:	4b67      	ldr	r3, [pc, #412]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800417a:	65ba      	str	r2, [r7, #88]	; 0x58
 800417c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417e:	fa92 f2a2 	rbit	r2, r2
 8004182:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004186:	fab2 f282 	clz	r2, r2
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f042 0220 	orr.w	r2, r2, #32
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f002 021f 	and.w	r2, r2, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f202 	lsl.w	r2, r1, r2
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d17b      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0f3      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d13c      	bne.n	8004228 <HAL_RCC_ClockConfig+0x178>
 80041ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d102      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x128>
 80041d2:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	e00f      	b.n	80041f8 <HAL_RCC_ClockConfig+0x148>
 80041d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80041fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004200:	fa92 f2a2 	rbit	r2, r2
 8004204:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f002 021f 	and.w	r2, r2, #31
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d13a      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b2      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
 8004228:	2302      	movs	r3, #2
 800422a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_RCC_ClockConfig+0x1a0>
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	e00d      	b.n	800426c <HAL_RCC_ClockConfig+0x1bc>
 8004250:	2302      	movs	r3, #2
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	2302      	movs	r3, #2
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2202      	movs	r2, #2
 800426e:	61ba      	str	r2, [r7, #24]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	fa92 f2a2 	rbit	r2, r2
 8004276:	617a      	str	r2, [r7, #20]
  return result;
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f042 0220 	orr.w	r2, r2, #32
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f002 021f 	and.w	r2, r2, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e079      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fc50 	bl	8001b50 <HAL_GetTick>
 80042b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fd fc4c 	bl	8001b50 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e061      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d214      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0207 	bic.w	r2, r3, #7
 80042f2:	4906      	ldr	r1, [pc, #24]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e040      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	491a      	ldr	r1, [pc, #104]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b16      	ldr	r3, [pc, #88]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4912      	ldr	r1, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004352:	f000 f829 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004356:	4601      	mov	r1, r0
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004360:	22f0      	movs	r2, #240	; 0xf0
 8004362:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	60fa      	str	r2, [r7, #12]
  return result;
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	40d3      	lsrs	r3, r2
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x2ec>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	fa21 f303 	lsr.w	r3, r1, r3
 800437e:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <HAL_RCC_ClockConfig+0x2f0>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_RCC_ClockConfig+0x2f4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fba0 	bl	8001acc <HAL_InitTick>
  
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3778      	adds	r7, #120	; 0x78
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	08005da4 	.word	0x08005da4
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000004 	.word	0x20000004

080043a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b08b      	sub	sp, #44	; 0x2c
 80043ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043c2:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x30>
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x36>
 80043d6:	e03c      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043da:	623b      	str	r3, [r7, #32]
      break;
 80043dc:	e03c      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	fa92 f2a2 	rbit	r2, r2
 80043f0:	607a      	str	r2, [r7, #4]
  return result;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	fab2 f282 	clz	r2, r2
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	40d3      	lsrs	r3, r2
 80043fc:	4a1b      	ldr	r2, [pc, #108]	; (800446c <HAL_RCC_GetSysClockFreq+0xc4>)
 80043fe:	5cd3      	ldrb	r3, [r2, r3]
 8004400:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	220f      	movs	r2, #15
 800440c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	fa92 f2a2 	rbit	r2, r2
 8004414:	60fa      	str	r2, [r7, #12]
  return result;
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	fab2 f282 	clz	r2, r2
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	40d3      	lsrs	r3, r2
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004422:	5cd3      	ldrb	r3, [r2, r3]
 8004424:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	fbb2 f2f3 	udiv	r2, r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
 8004440:	e004      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	623b      	str	r3, [r7, #32]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004454:	623b      	str	r3, [r7, #32]
      break;
 8004456:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004458:	6a3b      	ldr	r3, [r7, #32]
}
 800445a:	4618      	mov	r0, r3
 800445c:	372c      	adds	r7, #44	; 0x2c
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40021000 	.word	0x40021000
 8004468:	007a1200 	.word	0x007a1200
 800446c:	08005dbc 	.word	0x08005dbc
 8004470:	08005dcc 	.word	0x08005dcc
 8004474:	003d0900 	.word	0x003d0900

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <HAL_RCC_GetHCLKFreq+0x10>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004492:	f7ff fff1 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004496:	4601      	mov	r1, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	fa92 f2a2 	rbit	r2, r2
 80044ac:	603a      	str	r2, [r7, #0]
  return result;
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	fab2 f282 	clz	r2, r2
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	40d3      	lsrs	r3, r2
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	08005db4 	.word	0x08005db4

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044d6:	f7ff ffcf 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044da:	4601      	mov	r1, r0
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	fa92 f2a2 	rbit	r2, r2
 80044f0:	603a      	str	r2, [r7, #0]
  return result;
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	40d3      	lsrs	r3, r2
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044fe:	5cd3      	ldrb	r3, [r2, r3]
 8004500:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	08005db4 	.word	0x08005db4

08004514 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b092      	sub	sp, #72	; 0x48
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80cd 	beq.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004538:	4b86      	ldr	r3, [pc, #536]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10e      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b83      	ldr	r3, [pc, #524]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	4a82      	ldr	r2, [pc, #520]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454e:	61d3      	str	r3, [r2, #28]
 8004550:	4b80      	ldr	r3, [pc, #512]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b7d      	ldr	r3, [pc, #500]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d118      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a79      	ldr	r2, [pc, #484]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fd fae9 	bl	8001b50 <HAL_GetTick>
 800457e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004582:	f7fd fae5 	bl	8001b50 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0db      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b70      	ldr	r3, [pc, #448]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045a0:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d07d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d076      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	4b5e      	ldr	r3, [pc, #376]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	461a      	mov	r2, r3
 80045e8:	2301      	movs	r3, #1
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	461a      	mov	r2, r3
 800460c:	2300      	movs	r3, #0
 800460e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004610:	4a50      	ldr	r2, [pc, #320]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d045      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fd fa96 	bl	8001b50 <HAL_GetTick>
 8004624:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd fa92 	bl	8001b50 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e086      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800463e:	2302      	movs	r3, #2
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	fa93 f3a3 	rbit	r3, r3
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	2302      	movs	r3, #2
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	61fb      	str	r3, [r7, #28]
  return result;
 8004656:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f043 0302 	orr.w	r3, r3, #2
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d102      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	e007      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004672:	2302      	movs	r3, #2
 8004674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	4b35      	ldr	r3, [pc, #212]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2202      	movs	r2, #2
 8004684:	613a      	str	r2, [r7, #16]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	fa92 f2a2 	rbit	r2, r2
 800468c:	60fa      	str	r2, [r7, #12]
  return result;
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	fab2 f282 	clz	r2, r2
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	f002 021f 	and.w	r2, r2, #31
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f202 	lsl.w	r2, r1, r2
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0bd      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4926      	ldr	r1, [pc, #152]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	4a22      	ldr	r2, [pc, #136]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f023 0203 	bic.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	491a      	ldr	r1, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f023 0210 	bic.w	r2, r3, #16
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4912      	ldr	r1, [pc, #72]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800470a:	4313      	orrs	r3, r2
 800470c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	490b      	ldr	r1, [pc, #44]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004728:	4313      	orrs	r3, r2
 800472a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004746:	4313      	orrs	r3, r2
 8004748:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3748      	adds	r7, #72	; 0x48
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	40007000 	.word	0x40007000
 800475c:	10908100 	.word	0x10908100

08004760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e040      	b.n	80047f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd f80c 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	; 0x24
 800478c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8dc 	bl	800495c <UART_SetConfig>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e022      	b.n	80047f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa06 	bl	8004bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fa8c 	bl	8004d0a <UART_CheckIdleState>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004810:	2b20      	cmp	r3, #32
 8004812:	f040 8082 	bne.w	800491a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_UART_Transmit+0x26>
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07a      	b.n	800491c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_UART_Transmit+0x38>
 8004830:	2302      	movs	r3, #2
 8004832:	e073      	b.n	800491c <HAL_UART_Transmit+0x120>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2221      	movs	r2, #33	; 0x21
 8004848:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800484a:	f7fd f981 	bl	8001b50 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	88fa      	ldrh	r2, [r7, #6]
 800485c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	d108      	bne.n	800487c <HAL_UART_Transmit+0x80>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e003      	b.n	8004884 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800488c:	e02d      	b.n	80048ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	2180      	movs	r1, #128	; 0x80
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fa7f 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e039      	b.n	800491c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	881a      	ldrh	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ba:	b292      	uxth	r2, r2
 80048bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	3302      	adds	r3, #2
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	e008      	b.n	80048d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	b292      	uxth	r2, r2
 80048d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3301      	adds	r3, #1
 80048d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1cb      	bne.n	800488e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2140      	movs	r1, #64	; 0x40
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fa4b 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e005      	b.n	800491c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
	...

0800495c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b8a      	ldr	r3, [pc, #552]	; (8004bb0 <UART_SetConfig+0x254>)
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	430b      	orrs	r3, r1
 8004992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a78      	ldr	r2, [pc, #480]	; (8004bb4 <UART_SetConfig+0x258>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d120      	bne.n	8004a1a <UART_SetConfig+0xbe>
 80049d8:	4b77      	ldr	r3, [pc, #476]	; (8004bb8 <UART_SetConfig+0x25c>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d817      	bhi.n	8004a14 <UART_SetConfig+0xb8>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0x90>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a09 	.word	0x08004a09
 80049f4:	08004a0f 	.word	0x08004a0f
 80049f8:	08004a03 	.word	0x08004a03
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e01d      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a02:	2302      	movs	r3, #2
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e01a      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e017      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e014      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a14:	2310      	movs	r3, #16
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e011      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a67      	ldr	r2, [pc, #412]	; (8004bbc <UART_SetConfig+0x260>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d102      	bne.n	8004a2a <UART_SetConfig+0xce>
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e009      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a64      	ldr	r2, [pc, #400]	; (8004bc0 <UART_SetConfig+0x264>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d102      	bne.n	8004a3a <UART_SetConfig+0xde>
 8004a34:	2300      	movs	r3, #0
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e001      	b.n	8004a3e <UART_SetConfig+0xe2>
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d15b      	bne.n	8004b00 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004a48:	7ffb      	ldrb	r3, [r7, #31]
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d827      	bhi.n	8004a9e <UART_SetConfig+0x142>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0xf8>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7ff fd08 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8004a7c:	61b8      	str	r0, [r7, #24]
        break;
 8004a7e:	e013      	b.n	8004aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7ff fd26 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
        break;
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <UART_SetConfig+0x268>)
 8004a8a:	61bb      	str	r3, [r7, #24]
        break;
 8004a8c:	e00c      	b.n	8004aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7ff fc8b 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004a92:	61b8      	str	r0, [r7, #24]
        break;
 8004a94:	e008      	b.n	8004aa8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8004aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d074      	beq.n	8004b98 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b0f      	cmp	r3, #15
 8004aca:	d916      	bls.n	8004afa <UART_SetConfig+0x19e>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad2:	d212      	bcs.n	8004afa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f023 030f 	bic.w	r3, r3, #15
 8004adc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	89fa      	ldrh	r2, [r7, #14]
 8004af6:	60da      	str	r2, [r3, #12]
 8004af8:	e04e      	b.n	8004b98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	77bb      	strb	r3, [r7, #30]
 8004afe:	e04b      	b.n	8004b98 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b00:	7ffb      	ldrb	r3, [r7, #31]
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d827      	bhi.n	8004b56 <UART_SetConfig+0x1fa>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x1b0>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7ff fcac 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
        break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7ff fcca 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <UART_SetConfig+0x268>)
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7ff fc2f 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61b8      	str	r0, [r7, #24]
        break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	61bb      	str	r3, [r7, #24]
        break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085a      	lsrs	r2, r3, #1
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d908      	bls.n	8004b94 <UART_SetConfig+0x238>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d204      	bcs.n	8004b94 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e001      	b.n	8004b98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	efff69f3 	.word	0xefff69f3
 8004bb4:	40013800 	.word	0x40013800
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40004400 	.word	0x40004400
 8004bc0:	40004800 	.word	0x40004800
 8004bc4:	007a1200 	.word	0x007a1200

08004bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01a      	beq.n	8004cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc6:	d10a      	bne.n	8004cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d1a:	f7fc ff19 	bl	8001b50 <HAL_GetTick>
 8004d1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d10e      	bne.n	8004d4c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f82d 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e023      	b.n	8004d94 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d10e      	bne.n	8004d78 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f817 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e00d      	b.n	8004d94 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b09c      	sub	sp, #112	; 0x70
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	e0a5      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	f000 80a1 	beq.w	8004efa <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fc feca 	bl	8001b50 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <UART_WaitOnFlagUntilTimeout+0x32>
 8004dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d13e      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de2:	667b      	str	r3, [r7, #100]	; 0x64
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dee:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004df2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	663b      	str	r3, [r7, #96]	; 0x60
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e20:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e5      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e067      	b.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04f      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e68:	d147      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
 8004e94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ec6:	623a      	str	r2, [r7, #32]
 8004ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e010      	b.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	f43f af4a 	beq.w	8004dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3770      	adds	r7, #112	; 0x70
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b096      	sub	sp, #88	; 0x58
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2222      	movs	r2, #34	; 0x22
 8004f4c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02b      	beq.n	8004fae <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a40      	ldr	r2, [pc, #256]	; (800505c <UART_Start_Receive_DMA+0x138>)
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <UART_Start_Receive_DMA+0x13c>)
 8004f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a3e      	ldr	r2, [pc, #248]	; (8005064 <UART_Start_Receive_DMA+0x140>)
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	2200      	movs	r2, #0
 8004f74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	4619      	mov	r1, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	461a      	mov	r2, r3
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	f7fd fd7b 	bl	8002a84 <HAL_DMA_Start_IT>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00c      	beq.n	8004fae <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2210      	movs	r2, #16
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e051      	b.n	8005052 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fca:	657b      	str	r3, [r7, #84]	; 0x54
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e6      	bne.n	8004fb6 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005008:	637a      	str	r2, [r7, #52]	; 0x34
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	613b      	str	r3, [r7, #16]
   return(result);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503c:	623a      	str	r2, [r7, #32]
 800503e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	61bb      	str	r3, [r7, #24]
   return(result);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3758      	adds	r7, #88	; 0x58
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	08005177 	.word	0x08005177
 8005060:	08005295 	.word	0x08005295
 8005064:	080052cd 	.word	0x080052cd

08005068 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	60bb      	str	r3, [r7, #8]
   return(result);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6979      	ldr	r1, [r7, #20]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	613b      	str	r3, [r7, #16]
   return(result);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80050a8:	bf00      	nop
 80050aa:	3724      	adds	r7, #36	; 0x24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b095      	sub	sp, #84	; 0x54
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d8:	643b      	str	r3, [r7, #64]	; 0x40
 80050da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	2b01      	cmp	r3, #1
 8005126:	d118      	bne.n	800515a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	60bb      	str	r3, [r7, #8]
   return(result);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	647b      	str	r3, [r7, #68]	; 0x44
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6979      	ldr	r1, [r7, #20]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	613b      	str	r3, [r7, #16]
   return(result);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e6      	bne.n	8005128 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800516c:	bf00      	nop
 800516e:	3754      	adds	r7, #84	; 0x54
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b09c      	sub	sp, #112	; 0x70
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b20      	cmp	r3, #32
 800518a:	d070      	beq.n	800526e <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800518c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80051b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	667b      	str	r3, [r7, #100]	; 0x64
 80051de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051e6:	647a      	str	r2, [r7, #68]	; 0x44
 80051e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e5      	bne.n	80051c6 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	623b      	str	r3, [r7, #32]
   return(result);
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	663b      	str	r3, [r7, #96]	; 0x60
 8005212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800521a:	633a      	str	r2, [r7, #48]	; 0x30
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800522e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005230:	2220      	movs	r2, #32
 8005232:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	2b01      	cmp	r3, #1
 800523a:	d118      	bne.n	800526e <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60fb      	str	r3, [r7, #12]
   return(result);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	617b      	str	r3, [r7, #20]
   return(result);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800527c:	4619      	mov	r1, r3
 800527e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005280:	f7fb ff8c 	bl	800119c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005284:	e002      	b.n	800528c <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005286:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005288:	f7ff fb4c 	bl	8004924 <HAL_UART_RxCpltCallback>
}
 800528c:	bf00      	nop
 800528e:	3770      	adds	r7, #112	; 0x70
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d109      	bne.n	80052be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7fb ff70 	bl	800119c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052bc:	e002      	b.n	80052c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff fb39 	bl	8004936 <HAL_UART_RxHalfCpltCallback>
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d109      	bne.n	8005308 <UART_DMAError+0x3c>
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b21      	cmp	r3, #33	; 0x21
 80052f8:	d106      	bne.n	8005308 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005302:	6978      	ldr	r0, [r7, #20]
 8005304:	f7ff feb0 	bl	8005068 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d109      	bne.n	800532a <UART_DMAError+0x5e>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b22      	cmp	r3, #34	; 0x22
 800531a:	d106      	bne.n	800532a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005324:	6978      	ldr	r0, [r7, #20]
 8005326:	f7ff fec4 	bl	80050b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005330:	f043 0210 	orr.w	r2, r3, #16
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533a:	6978      	ldr	r0, [r7, #20]
 800533c:	f7ff fb04 	bl	8004948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	; 0x30
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800535a:	2b20      	cmp	r3, #32
 800535c:	d14a      	bne.n	80053f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e043      	b.n	80053f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005378:	2302      	movs	r3, #2
 800537a:	e03c      	b.n	80053f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	461a      	mov	r2, r3
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff fdc7 	bl	8004f24 <UART_Start_Receive_DMA>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800539c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d124      	bne.n	80053ee <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d11d      	bne.n	80053e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2210      	movs	r2, #16
 80053b2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	617b      	str	r3, [r7, #20]
   return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f043 0310 	orr.w	r3, r3, #16
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
 80053d4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6a39      	ldr	r1, [r7, #32]
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e6      	bne.n	80053b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 80053e6:	e002      	b.n	80053ee <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80053ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053f2:	e000      	b.n	80053f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 80053f4:	2302      	movs	r3, #2
  }
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3730      	adds	r7, #48	; 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <__errno>:
 8005400:	4b01      	ldr	r3, [pc, #4]	; (8005408 <__errno+0x8>)
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	2000000c 	.word	0x2000000c

0800540c <__libc_init_array>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	4d0d      	ldr	r5, [pc, #52]	; (8005444 <__libc_init_array+0x38>)
 8005410:	4c0d      	ldr	r4, [pc, #52]	; (8005448 <__libc_init_array+0x3c>)
 8005412:	1b64      	subs	r4, r4, r5
 8005414:	10a4      	asrs	r4, r4, #2
 8005416:	2600      	movs	r6, #0
 8005418:	42a6      	cmp	r6, r4
 800541a:	d109      	bne.n	8005430 <__libc_init_array+0x24>
 800541c:	4d0b      	ldr	r5, [pc, #44]	; (800544c <__libc_init_array+0x40>)
 800541e:	4c0c      	ldr	r4, [pc, #48]	; (8005450 <__libc_init_array+0x44>)
 8005420:	f000 fc8c 	bl	8005d3c <_init>
 8005424:	1b64      	subs	r4, r4, r5
 8005426:	10a4      	asrs	r4, r4, #2
 8005428:	2600      	movs	r6, #0
 800542a:	42a6      	cmp	r6, r4
 800542c:	d105      	bne.n	800543a <__libc_init_array+0x2e>
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	f855 3b04 	ldr.w	r3, [r5], #4
 8005434:	4798      	blx	r3
 8005436:	3601      	adds	r6, #1
 8005438:	e7ee      	b.n	8005418 <__libc_init_array+0xc>
 800543a:	f855 3b04 	ldr.w	r3, [r5], #4
 800543e:	4798      	blx	r3
 8005440:	3601      	adds	r6, #1
 8005442:	e7f2      	b.n	800542a <__libc_init_array+0x1e>
 8005444:	08005e10 	.word	0x08005e10
 8005448:	08005e10 	.word	0x08005e10
 800544c:	08005e10 	.word	0x08005e10
 8005450:	08005e14 	.word	0x08005e14

08005454 <memset>:
 8005454:	4402      	add	r2, r0
 8005456:	4603      	mov	r3, r0
 8005458:	4293      	cmp	r3, r2
 800545a:	d100      	bne.n	800545e <memset+0xa>
 800545c:	4770      	bx	lr
 800545e:	f803 1b01 	strb.w	r1, [r3], #1
 8005462:	e7f9      	b.n	8005458 <memset+0x4>

08005464 <siprintf>:
 8005464:	b40e      	push	{r1, r2, r3}
 8005466:	b500      	push	{lr}
 8005468:	b09c      	sub	sp, #112	; 0x70
 800546a:	ab1d      	add	r3, sp, #116	; 0x74
 800546c:	9002      	str	r0, [sp, #8]
 800546e:	9006      	str	r0, [sp, #24]
 8005470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005474:	4809      	ldr	r0, [pc, #36]	; (800549c <siprintf+0x38>)
 8005476:	9107      	str	r1, [sp, #28]
 8005478:	9104      	str	r1, [sp, #16]
 800547a:	4909      	ldr	r1, [pc, #36]	; (80054a0 <siprintf+0x3c>)
 800547c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005480:	9105      	str	r1, [sp, #20]
 8005482:	6800      	ldr	r0, [r0, #0]
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	a902      	add	r1, sp, #8
 8005488:	f000 f868 	bl	800555c <_svfiprintf_r>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	b01c      	add	sp, #112	; 0x70
 8005494:	f85d eb04 	ldr.w	lr, [sp], #4
 8005498:	b003      	add	sp, #12
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	ffff0208 	.word	0xffff0208

080054a4 <__ssputs_r>:
 80054a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a8:	688e      	ldr	r6, [r1, #8]
 80054aa:	429e      	cmp	r6, r3
 80054ac:	4682      	mov	sl, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	4690      	mov	r8, r2
 80054b2:	461f      	mov	r7, r3
 80054b4:	d838      	bhi.n	8005528 <__ssputs_r+0x84>
 80054b6:	898a      	ldrh	r2, [r1, #12]
 80054b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054bc:	d032      	beq.n	8005524 <__ssputs_r+0x80>
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	6909      	ldr	r1, [r1, #16]
 80054c2:	eba5 0901 	sub.w	r9, r5, r1
 80054c6:	6965      	ldr	r5, [r4, #20]
 80054c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054d0:	3301      	adds	r3, #1
 80054d2:	444b      	add	r3, r9
 80054d4:	106d      	asrs	r5, r5, #1
 80054d6:	429d      	cmp	r5, r3
 80054d8:	bf38      	it	cc
 80054da:	461d      	movcc	r5, r3
 80054dc:	0553      	lsls	r3, r2, #21
 80054de:	d531      	bpl.n	8005544 <__ssputs_r+0xa0>
 80054e0:	4629      	mov	r1, r5
 80054e2:	f000 fb61 	bl	8005ba8 <_malloc_r>
 80054e6:	4606      	mov	r6, r0
 80054e8:	b950      	cbnz	r0, 8005500 <__ssputs_r+0x5c>
 80054ea:	230c      	movs	r3, #12
 80054ec:	f8ca 3000 	str.w	r3, [sl]
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	6921      	ldr	r1, [r4, #16]
 8005502:	464a      	mov	r2, r9
 8005504:	f000 fabe 	bl	8005a84 <memcpy>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800550e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	6126      	str	r6, [r4, #16]
 8005516:	6165      	str	r5, [r4, #20]
 8005518:	444e      	add	r6, r9
 800551a:	eba5 0509 	sub.w	r5, r5, r9
 800551e:	6026      	str	r6, [r4, #0]
 8005520:	60a5      	str	r5, [r4, #8]
 8005522:	463e      	mov	r6, r7
 8005524:	42be      	cmp	r6, r7
 8005526:	d900      	bls.n	800552a <__ssputs_r+0x86>
 8005528:	463e      	mov	r6, r7
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	4632      	mov	r2, r6
 800552e:	4641      	mov	r1, r8
 8005530:	f000 fab6 	bl	8005aa0 <memmove>
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	1b9b      	subs	r3, r3, r6
 8005538:	60a3      	str	r3, [r4, #8]
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4433      	add	r3, r6
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	2000      	movs	r0, #0
 8005542:	e7db      	b.n	80054fc <__ssputs_r+0x58>
 8005544:	462a      	mov	r2, r5
 8005546:	f000 fba3 	bl	8005c90 <_realloc_r>
 800554a:	4606      	mov	r6, r0
 800554c:	2800      	cmp	r0, #0
 800554e:	d1e1      	bne.n	8005514 <__ssputs_r+0x70>
 8005550:	6921      	ldr	r1, [r4, #16]
 8005552:	4650      	mov	r0, sl
 8005554:	f000 fabe 	bl	8005ad4 <_free_r>
 8005558:	e7c7      	b.n	80054ea <__ssputs_r+0x46>
	...

0800555c <_svfiprintf_r>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	4698      	mov	r8, r3
 8005562:	898b      	ldrh	r3, [r1, #12]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	b09d      	sub	sp, #116	; 0x74
 8005568:	4607      	mov	r7, r0
 800556a:	460d      	mov	r5, r1
 800556c:	4614      	mov	r4, r2
 800556e:	d50e      	bpl.n	800558e <_svfiprintf_r+0x32>
 8005570:	690b      	ldr	r3, [r1, #16]
 8005572:	b963      	cbnz	r3, 800558e <_svfiprintf_r+0x32>
 8005574:	2140      	movs	r1, #64	; 0x40
 8005576:	f000 fb17 	bl	8005ba8 <_malloc_r>
 800557a:	6028      	str	r0, [r5, #0]
 800557c:	6128      	str	r0, [r5, #16]
 800557e:	b920      	cbnz	r0, 800558a <_svfiprintf_r+0x2e>
 8005580:	230c      	movs	r3, #12
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e0d1      	b.n	800572e <_svfiprintf_r+0x1d2>
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	616b      	str	r3, [r5, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	2320      	movs	r3, #32
 8005594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005598:	f8cd 800c 	str.w	r8, [sp, #12]
 800559c:	2330      	movs	r3, #48	; 0x30
 800559e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005748 <_svfiprintf_r+0x1ec>
 80055a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055a6:	f04f 0901 	mov.w	r9, #1
 80055aa:	4623      	mov	r3, r4
 80055ac:	469a      	mov	sl, r3
 80055ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b2:	b10a      	cbz	r2, 80055b8 <_svfiprintf_r+0x5c>
 80055b4:	2a25      	cmp	r2, #37	; 0x25
 80055b6:	d1f9      	bne.n	80055ac <_svfiprintf_r+0x50>
 80055b8:	ebba 0b04 	subs.w	fp, sl, r4
 80055bc:	d00b      	beq.n	80055d6 <_svfiprintf_r+0x7a>
 80055be:	465b      	mov	r3, fp
 80055c0:	4622      	mov	r2, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff ff6d 	bl	80054a4 <__ssputs_r>
 80055ca:	3001      	adds	r0, #1
 80055cc:	f000 80aa 	beq.w	8005724 <_svfiprintf_r+0x1c8>
 80055d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d2:	445a      	add	r2, fp
 80055d4:	9209      	str	r2, [sp, #36]	; 0x24
 80055d6:	f89a 3000 	ldrb.w	r3, [sl]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a2 	beq.w	8005724 <_svfiprintf_r+0x1c8>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ea:	f10a 0a01 	add.w	sl, sl, #1
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	9307      	str	r3, [sp, #28]
 80055f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055f6:	931a      	str	r3, [sp, #104]	; 0x68
 80055f8:	4654      	mov	r4, sl
 80055fa:	2205      	movs	r2, #5
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	4851      	ldr	r0, [pc, #324]	; (8005748 <_svfiprintf_r+0x1ec>)
 8005602:	f7fa fde5 	bl	80001d0 <memchr>
 8005606:	9a04      	ldr	r2, [sp, #16]
 8005608:	b9d8      	cbnz	r0, 8005642 <_svfiprintf_r+0xe6>
 800560a:	06d0      	lsls	r0, r2, #27
 800560c:	bf44      	itt	mi
 800560e:	2320      	movmi	r3, #32
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005614:	0711      	lsls	r1, r2, #28
 8005616:	bf44      	itt	mi
 8005618:	232b      	movmi	r3, #43	; 0x2b
 800561a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800561e:	f89a 3000 	ldrb.w	r3, [sl]
 8005622:	2b2a      	cmp	r3, #42	; 0x2a
 8005624:	d015      	beq.n	8005652 <_svfiprintf_r+0xf6>
 8005626:	9a07      	ldr	r2, [sp, #28]
 8005628:	4654      	mov	r4, sl
 800562a:	2000      	movs	r0, #0
 800562c:	f04f 0c0a 	mov.w	ip, #10
 8005630:	4621      	mov	r1, r4
 8005632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005636:	3b30      	subs	r3, #48	; 0x30
 8005638:	2b09      	cmp	r3, #9
 800563a:	d94e      	bls.n	80056da <_svfiprintf_r+0x17e>
 800563c:	b1b0      	cbz	r0, 800566c <_svfiprintf_r+0x110>
 800563e:	9207      	str	r2, [sp, #28]
 8005640:	e014      	b.n	800566c <_svfiprintf_r+0x110>
 8005642:	eba0 0308 	sub.w	r3, r0, r8
 8005646:	fa09 f303 	lsl.w	r3, r9, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	46a2      	mov	sl, r4
 8005650:	e7d2      	b.n	80055f8 <_svfiprintf_r+0x9c>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	1d19      	adds	r1, r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	9103      	str	r1, [sp, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbb      	ittet	lt
 800565e:	425b      	neglt	r3, r3
 8005660:	f042 0202 	orrlt.w	r2, r2, #2
 8005664:	9307      	strge	r3, [sp, #28]
 8005666:	9307      	strlt	r3, [sp, #28]
 8005668:	bfb8      	it	lt
 800566a:	9204      	strlt	r2, [sp, #16]
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	2b2e      	cmp	r3, #46	; 0x2e
 8005670:	d10c      	bne.n	800568c <_svfiprintf_r+0x130>
 8005672:	7863      	ldrb	r3, [r4, #1]
 8005674:	2b2a      	cmp	r3, #42	; 0x2a
 8005676:	d135      	bne.n	80056e4 <_svfiprintf_r+0x188>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	9203      	str	r2, [sp, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	bfb8      	it	lt
 8005684:	f04f 33ff 	movlt.w	r3, #4294967295
 8005688:	3402      	adds	r4, #2
 800568a:	9305      	str	r3, [sp, #20]
 800568c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800574c <_svfiprintf_r+0x1f0>
 8005690:	7821      	ldrb	r1, [r4, #0]
 8005692:	2203      	movs	r2, #3
 8005694:	4650      	mov	r0, sl
 8005696:	f7fa fd9b 	bl	80001d0 <memchr>
 800569a:	b140      	cbz	r0, 80056ae <_svfiprintf_r+0x152>
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	eba0 000a 	sub.w	r0, r0, sl
 80056a2:	fa03 f000 	lsl.w	r0, r3, r0
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	4303      	orrs	r3, r0
 80056aa:	3401      	adds	r4, #1
 80056ac:	9304      	str	r3, [sp, #16]
 80056ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b2:	4827      	ldr	r0, [pc, #156]	; (8005750 <_svfiprintf_r+0x1f4>)
 80056b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056b8:	2206      	movs	r2, #6
 80056ba:	f7fa fd89 	bl	80001d0 <memchr>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d038      	beq.n	8005734 <_svfiprintf_r+0x1d8>
 80056c2:	4b24      	ldr	r3, [pc, #144]	; (8005754 <_svfiprintf_r+0x1f8>)
 80056c4:	bb1b      	cbnz	r3, 800570e <_svfiprintf_r+0x1b2>
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	3307      	adds	r3, #7
 80056ca:	f023 0307 	bic.w	r3, r3, #7
 80056ce:	3308      	adds	r3, #8
 80056d0:	9303      	str	r3, [sp, #12]
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	4433      	add	r3, r6
 80056d6:	9309      	str	r3, [sp, #36]	; 0x24
 80056d8:	e767      	b.n	80055aa <_svfiprintf_r+0x4e>
 80056da:	fb0c 3202 	mla	r2, ip, r2, r3
 80056de:	460c      	mov	r4, r1
 80056e0:	2001      	movs	r0, #1
 80056e2:	e7a5      	b.n	8005630 <_svfiprintf_r+0xd4>
 80056e4:	2300      	movs	r3, #0
 80056e6:	3401      	adds	r4, #1
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	4619      	mov	r1, r3
 80056ec:	f04f 0c0a 	mov.w	ip, #10
 80056f0:	4620      	mov	r0, r4
 80056f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f6:	3a30      	subs	r2, #48	; 0x30
 80056f8:	2a09      	cmp	r2, #9
 80056fa:	d903      	bls.n	8005704 <_svfiprintf_r+0x1a8>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0c5      	beq.n	800568c <_svfiprintf_r+0x130>
 8005700:	9105      	str	r1, [sp, #20]
 8005702:	e7c3      	b.n	800568c <_svfiprintf_r+0x130>
 8005704:	fb0c 2101 	mla	r1, ip, r1, r2
 8005708:	4604      	mov	r4, r0
 800570a:	2301      	movs	r3, #1
 800570c:	e7f0      	b.n	80056f0 <_svfiprintf_r+0x194>
 800570e:	ab03      	add	r3, sp, #12
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	462a      	mov	r2, r5
 8005714:	4b10      	ldr	r3, [pc, #64]	; (8005758 <_svfiprintf_r+0x1fc>)
 8005716:	a904      	add	r1, sp, #16
 8005718:	4638      	mov	r0, r7
 800571a:	f3af 8000 	nop.w
 800571e:	1c42      	adds	r2, r0, #1
 8005720:	4606      	mov	r6, r0
 8005722:	d1d6      	bne.n	80056d2 <_svfiprintf_r+0x176>
 8005724:	89ab      	ldrh	r3, [r5, #12]
 8005726:	065b      	lsls	r3, r3, #25
 8005728:	f53f af2c 	bmi.w	8005584 <_svfiprintf_r+0x28>
 800572c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800572e:	b01d      	add	sp, #116	; 0x74
 8005730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005734:	ab03      	add	r3, sp, #12
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	462a      	mov	r2, r5
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <_svfiprintf_r+0x1fc>)
 800573c:	a904      	add	r1, sp, #16
 800573e:	4638      	mov	r0, r7
 8005740:	f000 f87a 	bl	8005838 <_printf_i>
 8005744:	e7eb      	b.n	800571e <_svfiprintf_r+0x1c2>
 8005746:	bf00      	nop
 8005748:	08005ddc 	.word	0x08005ddc
 800574c:	08005de2 	.word	0x08005de2
 8005750:	08005de6 	.word	0x08005de6
 8005754:	00000000 	.word	0x00000000
 8005758:	080054a5 	.word	0x080054a5

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4699      	mov	r9, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800576c:	4293      	cmp	r3, r2
 800576e:	bfb8      	it	lt
 8005770:	4613      	movlt	r3, r2
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005778:	4607      	mov	r7, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc26      	bgt.n	80057f2 <_printf_common+0x96>
 80057a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a8:	1e13      	subs	r3, r2, #0
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d42b      	bmi.n	800580c <_printf_common+0xb0>
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d01e      	beq.n	8005800 <_printf_common+0xa4>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	68e5      	ldr	r5, [r4, #12]
 80057c6:	6832      	ldr	r2, [r6, #0]
 80057c8:	f003 0306 	and.w	r3, r3, #6
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	bf08      	it	eq
 80057d0:	1aad      	subeq	r5, r5, r2
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	bf0c      	ite	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	2500      	movne	r5, #0
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfc4      	itt	gt
 80057e2:	1a9b      	subgt	r3, r3, r2
 80057e4:	18ed      	addgt	r5, r5, r3
 80057e6:	2600      	movs	r6, #0
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xc8>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xa8>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xac>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c6      	b.n	800579a <_printf_common+0x3e>
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	2030      	movs	r0, #48	; 0x30
 8005812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005816:	4422      	add	r2, r4
 8005818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005820:	3302      	adds	r3, #2
 8005822:	e7c7      	b.n	80057b4 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa4>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x8e>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	7e0f      	ldrb	r7, [r1, #24]
 800583e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005840:	2f78      	cmp	r7, #120	; 0x78
 8005842:	4691      	mov	r9, r2
 8005844:	4680      	mov	r8, r0
 8005846:	460c      	mov	r4, r1
 8005848:	469a      	mov	sl, r3
 800584a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d8 	beq.w	8005a0a <_printf_i+0x1d2>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80a3 	beq.w	80059a6 <_printf_i+0x16e>
 8005860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a101      	add	r1, pc, #4	; (adr r1, 8005878 <_printf_i+0x40>)
 8005874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059f1 	.word	0x080059f1
 80058a8:	08005915 	.word	0x08005915
 80058ac:	080059d3 	.word	0x080059d3
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a13 	.word	0x08005a13
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059db 	.word	0x080059db
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a3      	b.n	8005a2c <_printf_i+0x1f4>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	6829      	ldr	r1, [r5, #0]
 80058e8:	0606      	lsls	r6, r0, #24
 80058ea:	f101 0304 	add.w	r3, r1, #4
 80058ee:	d50a      	bpl.n	8005906 <_printf_i+0xce>
 80058f0:	680e      	ldr	r6, [r1, #0]
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	2e00      	cmp	r6, #0
 80058f6:	da03      	bge.n	8005900 <_printf_i+0xc8>
 80058f8:	232d      	movs	r3, #45	; 0x2d
 80058fa:	4276      	negs	r6, r6
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	485e      	ldr	r0, [pc, #376]	; (8005a7c <_printf_i+0x244>)
 8005902:	230a      	movs	r3, #10
 8005904:	e019      	b.n	800593a <_printf_i+0x102>
 8005906:	680e      	ldr	r6, [r1, #0]
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800590e:	bf18      	it	ne
 8005910:	b236      	sxthne	r6, r6
 8005912:	e7ef      	b.n	80058f4 <_printf_i+0xbc>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	6029      	str	r1, [r5, #0]
 800591c:	0601      	lsls	r1, r0, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xec>
 8005920:	681e      	ldr	r6, [r3, #0]
 8005922:	e002      	b.n	800592a <_printf_i+0xf2>
 8005924:	0646      	lsls	r6, r0, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xe8>
 8005928:	881e      	ldrh	r6, [r3, #0]
 800592a:	4854      	ldr	r0, [pc, #336]	; (8005a7c <_printf_i+0x244>)
 800592c:	2f6f      	cmp	r7, #111	; 0x6f
 800592e:	bf0c      	ite	eq
 8005930:	2308      	moveq	r3, #8
 8005932:	230a      	movne	r3, #10
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593a:	6865      	ldr	r5, [r4, #4]
 800593c:	60a5      	str	r5, [r4, #8]
 800593e:	2d00      	cmp	r5, #0
 8005940:	bfa2      	ittt	ge
 8005942:	6821      	ldrge	r1, [r4, #0]
 8005944:	f021 0104 	bicge.w	r1, r1, #4
 8005948:	6021      	strge	r1, [r4, #0]
 800594a:	b90e      	cbnz	r6, 8005950 <_printf_i+0x118>
 800594c:	2d00      	cmp	r5, #0
 800594e:	d04d      	beq.n	80059ec <_printf_i+0x1b4>
 8005950:	4615      	mov	r5, r2
 8005952:	fbb6 f1f3 	udiv	r1, r6, r3
 8005956:	fb03 6711 	mls	r7, r3, r1, r6
 800595a:	5dc7      	ldrb	r7, [r0, r7]
 800595c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005960:	4637      	mov	r7, r6
 8005962:	42bb      	cmp	r3, r7
 8005964:	460e      	mov	r6, r1
 8005966:	d9f4      	bls.n	8005952 <_printf_i+0x11a>
 8005968:	2b08      	cmp	r3, #8
 800596a:	d10b      	bne.n	8005984 <_printf_i+0x14c>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	07de      	lsls	r6, r3, #31
 8005970:	d508      	bpl.n	8005984 <_printf_i+0x14c>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4299      	cmp	r1, r3
 8005978:	bfde      	ittt	le
 800597a:	2330      	movle	r3, #48	; 0x30
 800597c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005984:	1b52      	subs	r2, r2, r5
 8005986:	6122      	str	r2, [r4, #16]
 8005988:	f8cd a000 	str.w	sl, [sp]
 800598c:	464b      	mov	r3, r9
 800598e:	aa03      	add	r2, sp, #12
 8005990:	4621      	mov	r1, r4
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fee2 	bl	800575c <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	d14c      	bne.n	8005a36 <_printf_i+0x1fe>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	b004      	add	sp, #16
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	4835      	ldr	r0, [pc, #212]	; (8005a7c <_printf_i+0x244>)
 80059a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059ac:	6829      	ldr	r1, [r5, #0]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80059b4:	6029      	str	r1, [r5, #0]
 80059b6:	061d      	lsls	r5, r3, #24
 80059b8:	d514      	bpl.n	80059e4 <_printf_i+0x1ac>
 80059ba:	07df      	lsls	r7, r3, #31
 80059bc:	bf44      	itt	mi
 80059be:	f043 0320 	orrmi.w	r3, r3, #32
 80059c2:	6023      	strmi	r3, [r4, #0]
 80059c4:	b91e      	cbnz	r6, 80059ce <_printf_i+0x196>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f023 0320 	bic.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	2310      	movs	r3, #16
 80059d0:	e7b0      	b.n	8005934 <_printf_i+0xfc>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	2378      	movs	r3, #120	; 0x78
 80059dc:	4828      	ldr	r0, [pc, #160]	; (8005a80 <_printf_i+0x248>)
 80059de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e2:	e7e3      	b.n	80059ac <_printf_i+0x174>
 80059e4:	0659      	lsls	r1, r3, #25
 80059e6:	bf48      	it	mi
 80059e8:	b2b6      	uxthmi	r6, r6
 80059ea:	e7e6      	b.n	80059ba <_printf_i+0x182>
 80059ec:	4615      	mov	r5, r2
 80059ee:	e7bb      	b.n	8005968 <_printf_i+0x130>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	6826      	ldr	r6, [r4, #0]
 80059f4:	6961      	ldr	r1, [r4, #20]
 80059f6:	1d18      	adds	r0, r3, #4
 80059f8:	6028      	str	r0, [r5, #0]
 80059fa:	0635      	lsls	r5, r6, #24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	d501      	bpl.n	8005a04 <_printf_i+0x1cc>
 8005a00:	6019      	str	r1, [r3, #0]
 8005a02:	e002      	b.n	8005a0a <_printf_i+0x1d2>
 8005a04:	0670      	lsls	r0, r6, #25
 8005a06:	d5fb      	bpl.n	8005a00 <_printf_i+0x1c8>
 8005a08:	8019      	strh	r1, [r3, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	4615      	mov	r5, r2
 8005a10:	e7ba      	b.n	8005988 <_printf_i+0x150>
 8005a12:	682b      	ldr	r3, [r5, #0]
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	602a      	str	r2, [r5, #0]
 8005a18:	681d      	ldr	r5, [r3, #0]
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7fa fbd6 	bl	80001d0 <memchr>
 8005a24:	b108      	cbz	r0, 8005a2a <_printf_i+0x1f2>
 8005a26:	1b40      	subs	r0, r0, r5
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	e7a8      	b.n	8005988 <_printf_i+0x150>
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	47d0      	blx	sl
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0ab      	beq.n	800599c <_printf_i+0x164>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	d413      	bmi.n	8005a72 <_printf_i+0x23a>
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	4298      	cmp	r0, r3
 8005a50:	bfb8      	it	lt
 8005a52:	4618      	movlt	r0, r3
 8005a54:	e7a4      	b.n	80059a0 <_printf_i+0x168>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	47d0      	blx	sl
 8005a60:	3001      	adds	r0, #1
 8005a62:	d09b      	beq.n	800599c <_printf_i+0x164>
 8005a64:	3501      	adds	r5, #1
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	9903      	ldr	r1, [sp, #12]
 8005a6a:	1a5b      	subs	r3, r3, r1
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dcf2      	bgt.n	8005a56 <_printf_i+0x21e>
 8005a70:	e7eb      	b.n	8005a4a <_printf_i+0x212>
 8005a72:	2500      	movs	r5, #0
 8005a74:	f104 0619 	add.w	r6, r4, #25
 8005a78:	e7f5      	b.n	8005a66 <_printf_i+0x22e>
 8005a7a:	bf00      	nop
 8005a7c:	08005ded 	.word	0x08005ded
 8005a80:	08005dfe 	.word	0x08005dfe

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memmove>:
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	eb01 0402 	add.w	r4, r1, r2
 8005aa8:	d902      	bls.n	8005ab0 <memmove+0x10>
 8005aaa:	4284      	cmp	r4, r0
 8005aac:	4623      	mov	r3, r4
 8005aae:	d807      	bhi.n	8005ac0 <memmove+0x20>
 8005ab0:	1e43      	subs	r3, r0, #1
 8005ab2:	42a1      	cmp	r1, r4
 8005ab4:	d008      	beq.n	8005ac8 <memmove+0x28>
 8005ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005abe:	e7f8      	b.n	8005ab2 <memmove+0x12>
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d100      	bne.n	8005aca <memmove+0x2a>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ad2:	e7f7      	b.n	8005ac4 <memmove+0x24>

08005ad4 <_free_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	d041      	beq.n	8005b60 <_free_r+0x8c>
 8005adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae0:	1f0c      	subs	r4, r1, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfb8      	it	lt
 8005ae6:	18e4      	addlt	r4, r4, r3
 8005ae8:	f000 f912 	bl	8005d10 <__malloc_lock>
 8005aec:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <_free_r+0x90>)
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	b933      	cbnz	r3, 8005b00 <_free_r+0x2c>
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	6014      	str	r4, [r2, #0]
 8005af6:	4628      	mov	r0, r5
 8005af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005afc:	f000 b90e 	b.w	8005d1c <__malloc_unlock>
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d908      	bls.n	8005b16 <_free_r+0x42>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	1821      	adds	r1, r4, r0
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	bf01      	itttt	eq
 8005b0c:	6819      	ldreq	r1, [r3, #0]
 8005b0e:	685b      	ldreq	r3, [r3, #4]
 8005b10:	1809      	addeq	r1, r1, r0
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	e7ed      	b.n	8005af2 <_free_r+0x1e>
 8005b16:	461a      	mov	r2, r3
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	b10b      	cbz	r3, 8005b20 <_free_r+0x4c>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d9fa      	bls.n	8005b16 <_free_r+0x42>
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	1850      	adds	r0, r2, r1
 8005b24:	42a0      	cmp	r0, r4
 8005b26:	d10b      	bne.n	8005b40 <_free_r+0x6c>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	4401      	add	r1, r0
 8005b2c:	1850      	adds	r0, r2, r1
 8005b2e:	4283      	cmp	r3, r0
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	d1e0      	bne.n	8005af6 <_free_r+0x22>
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	6053      	str	r3, [r2, #4]
 8005b3a:	4401      	add	r1, r0
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	e7da      	b.n	8005af6 <_free_r+0x22>
 8005b40:	d902      	bls.n	8005b48 <_free_r+0x74>
 8005b42:	230c      	movs	r3, #12
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	e7d6      	b.n	8005af6 <_free_r+0x22>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	1821      	adds	r1, r4, r0
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf04      	itt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	6063      	str	r3, [r4, #4]
 8005b56:	bf04      	itt	eq
 8005b58:	1809      	addeq	r1, r1, r0
 8005b5a:	6021      	streq	r1, [r4, #0]
 8005b5c:	6054      	str	r4, [r2, #4]
 8005b5e:	e7ca      	b.n	8005af6 <_free_r+0x22>
 8005b60:	bd38      	pop	{r3, r4, r5, pc}
 8005b62:	bf00      	nop
 8005b64:	200002ac 	.word	0x200002ac

08005b68 <sbrk_aligned>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4e0e      	ldr	r6, [pc, #56]	; (8005ba4 <sbrk_aligned+0x3c>)
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	6831      	ldr	r1, [r6, #0]
 8005b70:	4605      	mov	r5, r0
 8005b72:	b911      	cbnz	r1, 8005b7a <sbrk_aligned+0x12>
 8005b74:	f000 f8bc 	bl	8005cf0 <_sbrk_r>
 8005b78:	6030      	str	r0, [r6, #0]
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f8b7 	bl	8005cf0 <_sbrk_r>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	d00a      	beq.n	8005b9c <sbrk_aligned+0x34>
 8005b86:	1cc4      	adds	r4, r0, #3
 8005b88:	f024 0403 	bic.w	r4, r4, #3
 8005b8c:	42a0      	cmp	r0, r4
 8005b8e:	d007      	beq.n	8005ba0 <sbrk_aligned+0x38>
 8005b90:	1a21      	subs	r1, r4, r0
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 f8ac 	bl	8005cf0 <_sbrk_r>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d101      	bne.n	8005ba0 <sbrk_aligned+0x38>
 8005b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	200002b0 	.word	0x200002b0

08005ba8 <_malloc_r>:
 8005ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bac:	1ccd      	adds	r5, r1, #3
 8005bae:	f025 0503 	bic.w	r5, r5, #3
 8005bb2:	3508      	adds	r5, #8
 8005bb4:	2d0c      	cmp	r5, #12
 8005bb6:	bf38      	it	cc
 8005bb8:	250c      	movcc	r5, #12
 8005bba:	2d00      	cmp	r5, #0
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	db01      	blt.n	8005bc4 <_malloc_r+0x1c>
 8005bc0:	42a9      	cmp	r1, r5
 8005bc2:	d905      	bls.n	8005bd0 <_malloc_r+0x28>
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	2600      	movs	r6, #0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	4e2e      	ldr	r6, [pc, #184]	; (8005c8c <_malloc_r+0xe4>)
 8005bd2:	f000 f89d 	bl	8005d10 <__malloc_lock>
 8005bd6:	6833      	ldr	r3, [r6, #0]
 8005bd8:	461c      	mov	r4, r3
 8005bda:	bb34      	cbnz	r4, 8005c2a <_malloc_r+0x82>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4638      	mov	r0, r7
 8005be0:	f7ff ffc2 	bl	8005b68 <sbrk_aligned>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	4604      	mov	r4, r0
 8005be8:	d14d      	bne.n	8005c86 <_malloc_r+0xde>
 8005bea:	6834      	ldr	r4, [r6, #0]
 8005bec:	4626      	mov	r6, r4
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d140      	bne.n	8005c74 <_malloc_r+0xcc>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	eb04 0803 	add.w	r8, r4, r3
 8005bfc:	f000 f878 	bl	8005cf0 <_sbrk_r>
 8005c00:	4580      	cmp	r8, r0
 8005c02:	d13a      	bne.n	8005c7a <_malloc_r+0xd2>
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	3503      	adds	r5, #3
 8005c08:	1a6d      	subs	r5, r5, r1
 8005c0a:	f025 0503 	bic.w	r5, r5, #3
 8005c0e:	3508      	adds	r5, #8
 8005c10:	2d0c      	cmp	r5, #12
 8005c12:	bf38      	it	cc
 8005c14:	250c      	movcc	r5, #12
 8005c16:	4629      	mov	r1, r5
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f7ff ffa5 	bl	8005b68 <sbrk_aligned>
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d02b      	beq.n	8005c7a <_malloc_r+0xd2>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	442b      	add	r3, r5
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	e00e      	b.n	8005c48 <_malloc_r+0xa0>
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	1b52      	subs	r2, r2, r5
 8005c2e:	d41e      	bmi.n	8005c6e <_malloc_r+0xc6>
 8005c30:	2a0b      	cmp	r2, #11
 8005c32:	d916      	bls.n	8005c62 <_malloc_r+0xba>
 8005c34:	1961      	adds	r1, r4, r5
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	6025      	str	r5, [r4, #0]
 8005c3a:	bf18      	it	ne
 8005c3c:	6059      	strne	r1, [r3, #4]
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	bf08      	it	eq
 8005c42:	6031      	streq	r1, [r6, #0]
 8005c44:	5162      	str	r2, [r4, r5]
 8005c46:	604b      	str	r3, [r1, #4]
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f104 060b 	add.w	r6, r4, #11
 8005c4e:	f000 f865 	bl	8005d1c <__malloc_unlock>
 8005c52:	f026 0607 	bic.w	r6, r6, #7
 8005c56:	1d23      	adds	r3, r4, #4
 8005c58:	1af2      	subs	r2, r6, r3
 8005c5a:	d0b6      	beq.n	8005bca <_malloc_r+0x22>
 8005c5c:	1b9b      	subs	r3, r3, r6
 8005c5e:	50a3      	str	r3, [r4, r2]
 8005c60:	e7b3      	b.n	8005bca <_malloc_r+0x22>
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	bf0c      	ite	eq
 8005c68:	6032      	streq	r2, [r6, #0]
 8005c6a:	605a      	strne	r2, [r3, #4]
 8005c6c:	e7ec      	b.n	8005c48 <_malloc_r+0xa0>
 8005c6e:	4623      	mov	r3, r4
 8005c70:	6864      	ldr	r4, [r4, #4]
 8005c72:	e7b2      	b.n	8005bda <_malloc_r+0x32>
 8005c74:	4634      	mov	r4, r6
 8005c76:	6876      	ldr	r6, [r6, #4]
 8005c78:	e7b9      	b.n	8005bee <_malloc_r+0x46>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f000 f84c 	bl	8005d1c <__malloc_unlock>
 8005c84:	e7a1      	b.n	8005bca <_malloc_r+0x22>
 8005c86:	6025      	str	r5, [r4, #0]
 8005c88:	e7de      	b.n	8005c48 <_malloc_r+0xa0>
 8005c8a:	bf00      	nop
 8005c8c:	200002ac 	.word	0x200002ac

08005c90 <_realloc_r>:
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	4680      	mov	r8, r0
 8005c96:	4614      	mov	r4, r2
 8005c98:	460e      	mov	r6, r1
 8005c9a:	b921      	cbnz	r1, 8005ca6 <_realloc_r+0x16>
 8005c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	f7ff bf81 	b.w	8005ba8 <_malloc_r>
 8005ca6:	b92a      	cbnz	r2, 8005cb4 <_realloc_r+0x24>
 8005ca8:	f7ff ff14 	bl	8005ad4 <_free_r>
 8005cac:	4625      	mov	r5, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb4:	f000 f838 	bl	8005d28 <_malloc_usable_size_r>
 8005cb8:	4284      	cmp	r4, r0
 8005cba:	4607      	mov	r7, r0
 8005cbc:	d802      	bhi.n	8005cc4 <_realloc_r+0x34>
 8005cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cc2:	d812      	bhi.n	8005cea <_realloc_r+0x5a>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f7ff ff6e 	bl	8005ba8 <_malloc_r>
 8005ccc:	4605      	mov	r5, r0
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0ed      	beq.n	8005cae <_realloc_r+0x1e>
 8005cd2:	42bc      	cmp	r4, r7
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	bf28      	it	cs
 8005cda:	463a      	movcs	r2, r7
 8005cdc:	f7ff fed2 	bl	8005a84 <memcpy>
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7ff fef6 	bl	8005ad4 <_free_r>
 8005ce8:	e7e1      	b.n	8005cae <_realloc_r+0x1e>
 8005cea:	4635      	mov	r5, r6
 8005cec:	e7df      	b.n	8005cae <_realloc_r+0x1e>
	...

08005cf0 <_sbrk_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d06      	ldr	r5, [pc, #24]	; (8005d0c <_sbrk_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	f7fb fe6a 	bl	80019d4 <_sbrk>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_sbrk_r+0x1a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_sbrk_r+0x1a>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	200002b4 	.word	0x200002b4

08005d10 <__malloc_lock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__malloc_lock+0x8>)
 8005d12:	f000 b811 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	200002b8 	.word	0x200002b8

08005d1c <__malloc_unlock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__malloc_unlock+0x8>)
 8005d1e:	f000 b80c 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	200002b8 	.word	0x200002b8

08005d28 <_malloc_usable_size_r>:
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f18      	subs	r0, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfbc      	itt	lt
 8005d32:	580b      	ldrlt	r3, [r1, r0]
 8005d34:	18c0      	addlt	r0, r0, r3
 8005d36:	4770      	bx	lr

08005d38 <__retarget_lock_acquire_recursive>:
 8005d38:	4770      	bx	lr

08005d3a <__retarget_lock_release_recursive>:
 8005d3a:	4770      	bx	lr

08005d3c <_init>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr

08005d48 <_fini>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr
